
Objective
----------

Stripe Monthly subscription feature. 

Step 
-----

Signup for Stripe Account. See your keys here https://dashboard.stripe.com/account. Copy the API credentials:

Test Secret Key : sk_test_fIq8gFSbcYN5ENqdGe7Vu329
Test publishable Key : pk_test_wE4Io131CZgI5yWcRN8OyFkr

Step 
-----

Install the stripe gem. gem install stripe. If you are using bundler:
 
gem 'stripe', :git => 'https://github.com/stripe/stripe-ruby'

Step 
-----

Create a Stripe plan.

Step 
-----

Move all Stripe related logic into app/gateways/stripe folder in your Rails project.


Step 
-----

Create a plan, playing in the irb:

require "stripe"
Stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2"

Stripe::Plan.create(
  :amount => 2000,
  :interval => 'month',
  :name => 'Amazing Gold Plan',
  :currency => 'usd',
  :id => 'gold'
)


Delete a Plan
---------------

plan = Stripe::Plan.retrieve({PLAN_ID}) plan.delete

Subscribe to a plan
---------------

# Set your secret key: remember to change this to your live secret key in production
Stripe.api_key = "sk_test_BQokikJOvBiI2HlWgH4olfQ2"

# Get the credit card details submitted by the form
token = params[:stripeToken]

# Create a Customer
customer = Stripe::Customer.create(
  :card => token,
  :plan => "gold",
  :email => "payinguser@example.com"
)


Create a Customer
-------------------

# Create a token
# card = { :number => "4242424242424242", :exp_month => 8, :exp_year => 2015, :cvc => "314" }
# response = Stripe::Token.create(:card => card)
# puts response['id']

# tok_14Tj2w2eZvKYlo2C0ce3RoTz

response = Stripe::Customer.create(:description => "Customer for test@example.com",
                                   :card => "tok_14Tj2w2eZvKYlo2C0ce3RoTz")

puts response
puts response.class

puts response['id']


{
  "id": "cus_4cz7I6SnCZIrYF",
  "object": "customer",
  "created": 1408579761,
  "livemode": false,
  "description": "Customer for test@example.com",
  "email": null,
  "delinquent": false,
  "metadata": {},
at top level in "subscriptions": {"object":"list","total_count" at line 0
  "discount": null,
  "account_balance": 0,
  "currency": null,
at top level in "cards": {"object":"list","total_count" at line 1
  "default_card": "card_14Tj2w2eZvKYlo2CcnXI9SCh"
}
Stripe::Customer
cus_4cz7I6SnCZIrYF

Check the id is not nil for testing.

------------------------------------------------

# Subscribing a customer to a plan
# --------------------------------

# plans = Stripe::Plan.all
#
# puts plans.class
#
# plans.each do |plan|
#   puts plan
# end

# Store stripe plan id locally.

# Stripe::ListObject

#
# customer = Stripe::Customer.retrieve(CUSTOMER_ID) customer.subscriptions.create({:plan => PLAN_ID})

customer = Stripe::Customer.retrieve('cus_4cz7I6SnCZIrYF')
subscription = customer.subscriptions.create({:plan => 'usqfhq'})

puts subscription.class
puts subscription.id
puts subscription

# Stripe::Subscription
# sub_4dFhAPa595XZsN
# {
#   "id": "sub_4dFhAPa595XZsN",
#   "plan": {"id":"usqfhq","interval":"month","name":"Basic","created" }
#   "object": "subscription",
#   "start": 1408641490,
#   "status": "active",
#   "customer": "cus_4cz7I6SnCZIrYF",
#   "cancel_at_period_end": false,
#   "current_period_start": 1408641490,
#   "current_period_end": 1411319890,
#   "ended_at": null,
#   "trial_start": null,
#   "trial_end": null,
#   "canceled_at": null,
#   "quantity": 1,
#   "application_fee_percent": null,
#   "discount": null,
#   "metadata": {}
# }
# Check subscription.id has some value





References
------------

Stripe gem docs : link goes here
Refer Daniel Kenahoe's purchased book on Stripe related features.

Questions
-----------

1. Subscription happens in real-time? Can it be done in the background? READ : Mastering Modern Payments.

Building Links
---------------

1. Reply to comment on Railscasts on how to test Stripe integration:http://railscasts.com/episodes/288-billing-with-stripe?view=commentshttps://gist.github.com/justinthiele/1307748

Notes
-------

1.
Stripe tutorial (https://stripe.com/docs/tutorials/forms) which uses https://js.stripe.com/v2/ and has some differences, including the 'data-stripe' attribute.

Tried to add drop-downs for the expiry date and was told by Stripe support "The data-stripe version of Stripe.js doesn't support dropdowns yet. In the meantime, feel free to copy the old method from https://gist.github.com/boucher/1750368)"

2. https://gist.github.com/justinthiele/1307748

3. Create Test Cases Using https://stripe.com/docs/testing






