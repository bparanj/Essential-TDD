2. Test First Programming
=========
---------------------

Objective
=========

- To learn about Test First Programming

Discussion
==========

Let's write a simple calculator program driven by test. What statements can you make about the calculator program that is true? How about :

  - It should add given two numbers
  
Steps
=========
---------------------------

Step 1
-------

Let's write a specification for this statement. Create a file called calculator_spec.rb with the following contents:

```ruby
describe Calculator do
  it 'should add given two numbers' 
end
```

The describe is a RSpec method. In this case, we are describing the behavior of the Calculator class. We are expressing the requirement in the method called 'it' that takes a string as it's argument. 

Step 2
----------

Go to the directory where the spec file resides and run the test like this:

```ruby
$ rspec calculator_spec.rb --color --format documentation
```

This test fails. 

Step 3
--------------

Define Calculator class at the top of the calculator_spec.rb file with the code shown below:

```ruby
class Calculator
end
```

You now see a pending spec. This is because you have not written the test yet.

Step 4
----------------

Let's write the test as follows:

```ruby
describe Calculator do
  it 'should add given two numbers' do
    calculator = Calculator.new
    
    result = calculator.add(1,2)
    
    result.should == 3
  end
end
```

The test is written inside the do-end block of the 'it' method. We first create an instance of the Calculator class. The second step is invoking the method add(x, y) to calculate sum of two numbers. The third step is checking if the result is the same as we expect. In this step, we have converted the statement that is true to an assertion.

Step 5
--------------

Follow the step 2 instructions. This test fails because you have not defined the add(x,y) method.

Step 6
--------------

Define the add method to the class as follows:

```ruby
class Calculator
  def add(x,y)
    
	end
end
```

Step 7
--------------

Follow the step 2 instructions to run the test again. We now have a test that is failing for the right reason. Failing for the right reason means that the test will fail to satisfy the requirements instead of syntax mistakes, missing require statements etc.

Step 8
--------------

Change the add to return : x + y. Now the test passes.

Step 9
--------------

You can now move the Calculator class to its own file called calculator.rb.

Step 10
--------------

Add 

```ruby
require_relative 'calculator'
```

to the top of the calculator_spec.rb.

Step 11
--------------
 Run the test again. It should now pass. You can also use expect() method instead of should() method like this:
 
```ruby
expect(result).to eq(3)
```

Summary
=========

In this article we took little baby steps. We wrote the test first. Initial error messages were related to setting up the environment. Once you get past that, you can make the test fail for the right reason. Then you implement the code to make the test pass. Once you get to green you can cleanup the test and the production code. This is called as refactoring. We will discuss more about refactoring in another article.


Exercises
===========
--------------------

1. Write specs for the following statements:
   - It should subtract given two numbers
	 - It should multiply given two numbers
	 - It should divide given two numbers

2. Write specs for edge cases such as invalid input, division by 0 etc.

3. Create a .rspec file with the following contents

```ruby
--color
--format documentation
```

Now you can run the specs without giving it any options like this:

```ruby
rspec calculator_spec.rb
```

What do you see as the output in the terminal?





4. Read the book Code Simplicity by Max Kanat-Alexander. It explains Incremental Development and Incremental Design with the calculator as an example in Chapter 5 : Change. It is less than 100 pages, very easy to read and filled with great insights on software development.

5. Refer the [rspec documentation] for examples on how to use the rspec API. 

[rspec documentation]:https://www.relishapp.com/rspec/rspec-core/docs



