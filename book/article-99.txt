Mongodb Basics


CAP Theorem
============
------------

The CAP Theorem states that, in a distributed system (a collection of interconnected nodes that share data), you can
only have two out of the three guarantees across a write/read pair: Consistency, Availability, and
Partition Tolerance.


Consistency   - If a value is written and then fetched, I will always get back the new value.
Availability  - If a value is written, a success message should always be returned. If a subsequent read returns a
                stale value, it's ok.
Partition Tolerance - The system will continue to function when network partitions occur.


Why Mongodb?
===========
-----------

Here is a visual guide to NoSQL systems:

http://i.stack.imgur.com/a9hMn.png

You can see that mongodb has picked consistency and partition tolerance. This diagram also gives you a good big
picture of how different NoSQL databases fit in the CAP triangle.

When to Use Mongodb?
===========
-----------

For most modern web apps that requires:

1. Account and user profiles
2. CMS
3. Form data
4. Blogs / user-generated content
5. Messaging
6. System configuration
7. Log data of any kind
8. Graphs
9. Location based data

Installing on Mac
==================
------------------

brew install mongodb

Initial Setup
=============
-------------

Create the data directory:

```sh
$ sudo mkdir -p /data/db
```

```sh
$ ls -ld /data/db
drwxr-xr-x  2 root  wheel  68 Sep 25 17:03 /data/db
```

The data directory must have read / write permission for the user who will run the mongoid process. Here you see only root
has all the permission.

Let's provide the current logged in user the permission to read and write:

```sh
sudo chown -R $USER /data/db
```

You will get : '10309 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance
already running?, terminating' error if you don't have the read / write previleges.

Running Mongodb
=============
-------------

```sh
$mongodb
```

Connect to Mongod
================
----------------

```sh
$mongo
```

This will open mongodb shell that allows you to interact with mongodb.

```sh
~$ mongo
MongoDB shell version: 2.6.3
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
http://docs.mongodb.org/
Questions? Try the support group
http://groups.google.com/group/mongodb-user
Server has startup warnings:
2014-09-25T17:13:59.763-0700 [initandlisten]
2014-09-25T17:13:59.763-0700 [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000
>
```

By default, mongodb uses test database, you can see the current database by using the 'db' command:

```sh
> db
test
```

To see a list of all databases:

```sh
> show dbs
admin  (empty)
local  0.078GB
```

To use a new database 'mydb':

```sh
> use mydb
switched to db mydb
```

To check the current database:

```sh
> db
mydb
```

When you use a new database, the current database changes to the new database.

```sh
> show dbs
admin  (empty)
local  0.078GB
```

But the show dbs command does not show the mydb in it's list.

Let's create two new documents using javascript functions:

```sh
 j = { name : 'Mongo' }
{ "name" : "Mongo" }
> k = { x : 3 }
{ "x" : 3 }
```

To insert the two documents into the mydb database:

```sh
> db.testData.insert(j)
WriteResult({ "nInserted" : 1 })
> db.testData.insert(k)
WriteResult({ "nInserted" : 1 })
```

Here the testData is a collection that can hold documents. In this case we have
two documents in the testData collection. The collection is equivalent to table in
relational databases.

To view all the collections:

```sh
> show collections
system.indexes
testData
```

You can see we have testData collection.

```sh
> show dbs
admin  (empty)
local  0.078GB
mydb   0.078GB
```

Now we also see the mydb database, it was created when new documents were
inserted into the testData collection.

Let's check the two new documents we created exists in the database:

```sh
> db.testData.find()
{ "_id" : ObjectId("5424b92e0b73fd80bdd0724a"), "name" : "Mongo" }
{ "_id" : ObjectId("5424b9380b73fd80bdd0724b"), "x" : 3 }
```

_id has unique value for every document. Mongodb automatically generates the value and assigns to a document
when it is created.

References:
=========
---------

1. [MongoDb and the "10309 Unable to create/open lock file" on Ubuntu ] (http://www.marcusoft.net/2014/05/mongodb-and-10309-unable-to-createopen.html '10309 Unable to create/open lock file')
2. [Getting Started with MongoDB] (http://docs.mongodb.org/manual/tutorial/getting-started/ 'Mongodb Getting Started')
3. [Install MongoDB on OS X] (http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/ 'Install MongoDB on OS X')
4. [CAP Theorem: Revisited](http://robertgreiner.com/2014/08/cap-theorem-revisited/ 'CAP Theorem: Revisited')
5. [Why is MongoDB wildly popular?](http://blog.mongolab.com/2012/08/why-is-mongodb-wildly-popular/ 'Why MongoDB')
6. [Where does MongoDB stand in CAP Theorem](http://stackoverflow.com/questions/11292215/where-does-mongodb-stand-in-the-cap-theorem 'cap theorem mongodb')

Next Article Resources

Insert Document
========
---------

The db.collection.insert() method inserts new documents to a collection.

```sh
> db.inventory.insert(
...    {
...      item: "ABC1",
...      details: {
...         model: "14Q3",
...         manufacturer: "XYZ Company"
...      },
...      stock: [ { size: "S", qty: 25 }, { size: "M", qty: 50 } ],
...      category: "clothing"
...    }
... )
WriteResult({ "nInserted" : 1 })
```

The result is a WriteResult object that shows the number of documents inserted.

Read Document
========
--------

```sh
> db.inventory.find()
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1",
"details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" },
"stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
```

Insert Multiple Documents
===========
-----------

Create an array that holds multiple documents to insert.

```sh
> var mydocuments =
...     [
...       {
...         item: "ABC2",
...         details: { model: "14Q3", manufacturer: "M1 Corporation" },
...         stock: [ { size: "M", qty: 50 } ],
...         category: "clothing"
...       },
...       {
...         item: "MNO2",
...         details: { model: "14Q3", manufacturer: "ABC Company" },
...         stock: [ { size: "S", qty: 5 }, { size: "M", qty: 5 }, { size: "L", qty: 1 } ],
...         category: "clothing"
...       },
...       {
...         item: "IJK2",
...         details: { model: "14Q2", manufacturer: "M5 Corporation" },
...         stock: [ { size: "S", qty: 5 }, { size: "L", qty: 1 } ],
...         category: "houseware"
...       }
...     ];
```

Insert the documents.

```sh
> db.inventory.insert(mydocuments)
BulkWriteResult({
"writeErrors" : [ ],
"writeConcernErrors" : [ ],
"nInserted" : 3,
"nUpserted" : 0,
"nMatched" : 0,
"nModified" : 0,
"nRemoved" : 0,
"upserted" : [ ]
})
```

Query Documents
=========
---------

Select all documents in a collection.

```sh
> db.inventory.find()
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1",
"details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" },
"stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724d"), "item" : "ABC2",
"details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" },
"stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724e"), "item" : "MNO2",
"details" : { "model" : "14Q3", "manufacturer" : "ABC Company" },
"stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2",
"details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" },
"stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

Specify Equality Condition

To retrieve from the inventory collection all documents where the category field is houseware:

```sh
> db.inventory.find({category: 'houseware'})
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

Specify Conditions Using Query Operators

To find documents in the inventory collection where the value of category field is either 'houseware' or 'clothing'.

```sh
> db.inventory.find({category: {$in: ['houseware', 'clothing']}})
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724d"), "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724e"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

You can also use $or operator to achieve the same result :

```sh
> db.inventory.find({ $or: [{ category: 'houseware'}, {category: 'clothing'}]})
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724d"), "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724e"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

The $or operator is not preferred when performing equality checks on the same field.

Specify AND Conditions

```sh
> db.inventory.find({ category: 'houseware', item: 'IJK2'} )
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

This query selects all documents where category is houseware and the item value is IKJ2.

Specify OR Conditions

```sh
> db.inventory.find(    {      $or: [ { qty: { $gt: 1 } }, { category: 'houseware' } ]    } )
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```


1. [MongoDB Map Reduce](http://docs.mongodb.org/manual/core/map-reduce/ 'MongoDB Map Reduce')
2. [MongoDB Ruby Driver Tutorial](https://github.com/mongodb/mongo-ruby-driver/wiki/Tutorial 'MongoDB Ruby Driver')