


>> Distinguish between business exceptions and technical. Create a specific exception so that the client can handle the situation on its own terms. 

>> Tip by Dan Bergh Johnsson from the book 97 Things a Programmer Should Know

The application should separate data access logic from business logic. We don't want our application to be dependent on the external systems such as database, API, messaging bus etc. We encapsulate the low-lever data manipulation logic in a data access layer. This is isolated from the domain model. External systems have their own errors and exceptions. These errors should not propagate to other layers, if it does, the other layers will become specific to the implementation details and will make switching to a different data source difficult. Therefore we lose flexibility. To prevent this, we can translate the technical exceptions to business exceptions in the data access layer. We can also have a data mapper layer that maps the persistence objects to domain objects. Thus the data mapper layer protects the application from the data formats dictated by the persistence layer. It also makes the data access layer agnostic to how the domain model works. So, the application logic and data access logic are separated from each other. This means we have achieved Separation of Concerns. This also means that these layers can developed in parallel by different teams without depending on each other. Changes in one layer does not affect any changes to the other layers. Testing will also be easier since we test each layer in isolation. As long as we program to an interface that defines the communication between layers, changes do not ripple into other layers of the system. External systems are wrapped in a well defined interface.

