1. Open config/routes.rb file and add :
   resources :articles
	 
	 Save the file. Your file should like this :
	 
	 Blog::Application.routes.draw do
	   root 'welcome#index'
  
	   resources :articles
	 end
	 
	 What is a resource? Resource can represent any concept. For instance if the read the documenation for Twitter API https://dev.twitter.com/docs/api/1.1, you will see that Timeline is a resource. It is defined in the documenation as collections of Tweets, ordered with the most recent first. There may not be no one-to-one correspondence between a resource and database table. In our case we have one-to-one correspondence between the database table articles and the article resource.
	 
2. Go to the blog directory in the terminal and run:
	 $ rake routes

	 The output shows that defining the articles resource in the routes.rb gives us routing for :
	 
	 [MAKE THE FOLLOWING A TABLE]
	 Purpose                   Action         ---> Table Header
	 creating a new article - create 
	 updating a given article - update
	 deleting a given article - delete
	 displaying a given article - show 
	 displaying all articles  - index.

	 Since we have plural resources in the routes.rb, we get the index action. If you had used a singular resource : 
	 resource :article
	 
	 then you will not have a routing for index action. Based on the requirements you will choose a singular or plural resources for your application.
	 
3. In the previous chapter we saw how the controller and view work together. Now let's look at the model. Create an active_record object by running the following command:
	 $ rails g model article title:string description:text
	 
	 In this command the rails generator generates a model by the name of article. The active_record is the singular form, the database will be plural form called as articles. The articles table will have a title column of type string and description column of type text. 
	
4. Open the file db/migrate/xyz_create_articles.rb file. The xyz will be a timestamp and it will differ based on when you ran the command. 

5. There is a change method in the migration file. Inside the change method there is create_table method that takes the name of the table to create and also the columns and it's data type. In our case we are creating the articles table. Timestamps gives created_at and updated_at timestamps that tracks when a given record was created and updated respectively. By convention the primary key of the table is id. So you don't see it explictly in the migration file.

6. Go to the blog directory in the terminal and run :
   $ rake db:migrate
	 
	 This will create the articles table. 
	 
7. In the blog directory run:
   $ rails db
	 
	 This will drop you into the database console. You can run SQL commands to query the development database.
	 
8. In the database console run:
   select * from articles;
	 
	 ~/projects/blog $ rails db
	 SQLite version 3.8.0.2 2013-09-03 17:11:13
	 Enter ".help" for instructions
	 Enter SQL statements terminated with a ";"
	 sqlite> select count(*) from articles;
	 0
	 sqlite> 
	 
	 You can see from the output there are no records in the database. 
	 
9. Open another tab in the terminal and go to the blog directory. Run the following command:

	 $ rails c
	 
	 c is the alias for console. This will take you to rails console where you can execute Ruby code and experiment to learn Rails.
	 
10. Type : 
    Article.count
		in the rails console. You will see the count is 0. Let's create a row in the articles table. 
		
11. Type :
     Article.create(title: 'test', description: 'first row')
		 
    The Article class method create creates a row in the database. You can see the ActiveRecord generated SQL query in the output.
		
Exercise

Check the number of articles count by using the database console or the rails console.

12. Let's create another record by running the following command in the rails console:
    $ article = Article.new(title: 'another record', description: 'different way to create row')
		
Exercise

Check the number of articles count by using the database console or the rails console. How many rows do you see in the articles table? Why?

[new page]

The reason you see only one record in the database is that creating an instance of Article does not create a record in the database. The article instance in this case is still in memory. In order to save this instance to the articles table, you need to call the save method like this:
   $ article.save
	 
Now query the articles table to get the number of records. We now have some records in the database. In the next chapter we will display all the records in articles table on the browser.

Summary

In this chapter we focused on learning the model part M of the MVC framework. We experimented in the rails console and database console to create records in the database. In the next chapter we will see how the different parts of the MVC interact to create database driven dynamic web application.


	 