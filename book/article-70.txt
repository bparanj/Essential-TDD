Apply Napkin Academy Techniques to Summarize the Following Notes


Solving Programming Problems
----------------------------------------

See the transcript.txt on more discussion of problem solving and merge with this document and 'Making Complex Matters Simple' notes.

----------------------------------------
PeepCode

7 Troubleshooting Strategies

1. Gather Data
2. Isolate the Fault
3. Form a Hypothesis
4. Read the Docs                 Analyze the Problem Domain
5. Describe the Problem          Analyze the Problem Domain
6. Analyze the Solution Domain   Read the Code
7. Try Another Angle

Most of the time we don't know the problem. We only know about the symptoms. Most of the time, exception handling provides vague messages that does not provide enough information on how to resolve the problem. Code fails silently making it difficult to isolate the problem. Exceptions are not raised as close to the problem as possible. Exceptions are not translated from one layer to another layer to provide a higher abstraction. Meaningless error messages are shown to the user that does not give enough information to resolve problems.

Gather Data

Collect all the information available to you: log files, terminal output, error messages, process IDs, memory usuage or any other data relevant to the problem.

Isolate the Fault

Find the breaking point. Iteratively reduce the search space. This could be deleting the code gradually till the error disappears. It could be downgrading the dependent libraries to revert back to a working version. Look at open bugs of dependent libraries to check if it's a known problem. Verify that supporting parts of the system are working by using diagnostic tools such as curl, telnet or library you developed. Then try to identify and recreate the exact error. Make a list all possible sources of problem. 

Form a Hypothesis

Ask a question that can be verified with a test. A good hypothesis will explain both the working parts and the broken parts of the system.

Read the Docs

Search Google, read API docs, search knowledge base, look at issue trackers, read blogs, watch videos, read books etc.

Describe the Problem

Talk through the problem with a co-worker. The goal isn't to ask them to solve the problem for you, but to help you understand the problem by describing it to someone else. It's very effective. This is called cognitive walkthrough.

Read the Code

Read and understand your application's code and the code of a third-party library. You will be able to fix a bug or at least understand why it's not working.

Try Another Angle

When all else fails, take drastic action. Make a brand new project to test out a single line of code. Use external verification tools or internal measurement tools. Recreate the problem in a different way. Create a simple test case.

----------------------------------------

The Scientific Method is an investigative process that uses logic to formulate and test theories through observation and methodical experimentation. It is the basis of how mankind derives knowledge from the natural world. The Scientific Method has been around since mankind first started asking "Why?" and "How?".

If you want to solve a technical problem, you need a logical and systematic procedure that can be used to sift through the available information, discard what is irrelevant, discover other useful facts and make logical conclusions in order to arrive at the source of the problem. In most cases, you will use the Scientific Method not once but several times to arrive at the source of the problem.

The Scientific Method

The Scientific Method eliminates irrelevancies and brings you to the root cause. There are six steps in the scientific method:

1. Gather Information
2. State the Problem
3. Form a hypothesis
4. Test the hypothesis
5. Observe Results & Draw conclusions
6. Repeat as necessary

Gather Information

    "It is a capital mistake to theorize before you have all the evidence. It biases the judgment." -- Shirlock Holmes, A Study In Scarlet, Ch. 3, p. 27

Gather reliable information about what problem is occurring in order to discover what is not functioning properly. Gather as much information as possible. The most common cause of extended problems is a lack of information.

When gathering information:

    Sort out what is related and unrelated to the problem.
    Write down what you know is related to the problem so you can refer back to it later.
    Most of the pieces of data you collect will suggest one or more things you can test in order to uncover the root of the problem.
    Sketching a diagram of everything you believe to be involved the problem may be helpful.

The information you gather can and should come from multiple sources. There are several ways to gather information about the problem.

Check the Fundamentals

Here, during the early information collection phase is where knowing how a system works from the bottom up becomes useful.

Checking Event Logs and System Data

There is good information in the system and application logs including error messages, crash notifications, errors and exit codes. 

Pinpoint When the Problem Began (What Changed?)

When a system has worked in the past, determine what changed to cause the current problem. Knowing what changed and when is why you need Change Management and Change Notification processes within your organization.


Change Management
Release Management
What fixes are in which release? By versioning your software and providing a change log that documents the fixes and features for each version of the software we make it easier to troubleshoot problems. We will be able to isolate problems due to version. For instance the fix may not be deployed on acceptance environment since it is still in QA, so we don't have to waste time on troubleshooting.


    In solving a problem of this sort, the grand thing is to be able to reason backward.

Ask:

    When did the problem begin?
    What activity was going on when the problem began?
    What was the last change to the system prior to the problem starting?
    When was the last change applied?

Note Common Symptoms, Causes and Results

    What do the symptoms have in common?
    Is there some symptom that is unique to this problem?
    When you do X, expecting Y, does Z also always happen?
    
Interview the User

Ask the user what he is experiencing, but treat it with extreme caution. Users also lie on occasion.

    Try to reproduce the user's error
    Is the problem a real technical failure, or is the computer not doing what the user expects it should be doing?"

Sometimes the key to fixing a problem is to observe the actual failure as it occurs. It is often a good idea to turn on additional logging or diagnostic modes, run the command in verbose mode or use other diagnostic tools to gather information.

State the Problem

This is the process of reviewing all available information and getting a clear understanding of the perceived failure. Putting the problem into words clarifies the problem. The Problem Statement should be very clear about what the problem is, and is not.

The problem statement should include as much of the following information as possible. If you do not have one or more of these, you have not gathered enough information.

    When the problem started
    Who is affected, one person, several people, all users
    Which specific service, function impaired
    What action or activity triggers the problem.
    Where the problem is observed.

Troubleshooting is the science of figuring out the why.

Examples of good Problem Statements:

    Since Tuesday, all users logging into the Active Directory network have been reporting that they cannot access their personal share because the drive icon is missing.
    Today--around 1pm, users in the billing department reported that Internet Explorer browser crashes when browsing http://www.example.com.

Form a Hypothesis

After collecting information and clearly stating the problem, formulate a theory as to a possible cause. This should take the form of a question.

    PROBLEM STATEMENT: Since Tuesday, all users logging into the Active Directory network have been reporting that they cannot access their personal share because the drive icon is missing.
        HYPOTHESIS 1: The file server is down
        HYPOTHESIS 2: The file server's network connection is down
        HYPOTHESIS 3: The file server's shared folder is no longer shared
        HYPOTHESIS 4: The permissions on the share changed
        HYPOTHESIS 5: The logon script that maps the drive is not running or working correctly.

NOTE: One roadblock to coming up with a good problem statement is not understanding the hardware, technologies and external libraries in use. Training is critical to providing superior support and swift troubleshooting.
 
Test the Hypothesis

Once you have stated the problem, devise a method to test your hypothesis of the problem. Each test you perform should follow these simple principles:

    Change only one variable at a time.
    No other variables should be changed.
    The test should categorically eliminate at least one possible cause.

Observe Test Results & Draw Conclusions

After each test, note whether the change you made did, or did not solve the problem. You must note the results of your test, gather any new information from the system or user and draw a conclusion as to whether the problem is solved or whether the change you made had any affect on the problem. Once you have drawn conclusions, you can devise new tests to eliminate other possible causes.

To quote the great Shirlock Holmes:

    "Eliminate all other factors, and the one which remains must be the truth."
    Chapter 1, p92; "The Sign of the Four" 1890
 
Repeat as Necessary

The troubleshooting process is iterative and must be repeated until a solution is found. This troubleshooting method relies on identifying possible causes, categorically eliminating each possible cause until the true, root cause of the problem is found. You cannot find and fix the true root cause of the problem unless you apply the scientific method to your troubleshooting.


A Scientific Method for Troubleshooting


Troubleshooting is uncovering the root cause of an issue and then resolving it deliberately. The scientific method can provide a common framework for an effective troubleshooting.

Step 1: Describe the problem [THIS CANNOT BE THE FIRST STEP WHEN YOU DON'T KNOW THE PROBLEM YET]

Find out what the problem is and reproduce it. Users can’t always be trusted to know what they’re doing. By reproducing the problem, you can rule out user error and verify the existence of a problem.

Step 2: Gather and analyze data

This requires direct observations in order to find out what is happening. This is dependent on the problem.

Step 3: Form a hypothesis

It isn’t until you figure out what’s happening that you can address the question of why it’s happening. Step three is where you use the information you gathered in step two to determine a logical course of action. Remember that a hypothesis beginning with “maybe” or “I think” with no evidence to back it up is a sign of ignorance.

Step 4: Test your hypothesis

Perform your planned course of action.

Step 5: Analyze results and draw conclusions

Check to see if the issue is resolved. If not, revert your changes and go back to step three. When drawing conclusions, ask yourself how this problem occurred in the first place. Was your most recent fix permanent or just a temporary band-aid? If the fix was temporary, make sure you schedule a time to implement a permanent fix.

--------------------------------------------------------------------------------
 
The Scientific Method & Computer Troubleshooting By Bennett Hendry

A description of the application of formal scientific methods to computer problem solving.

1 Define the Problem 

Usually, we only observe the symptom of the problem. We must distinguish between the problem and the symptom. 

2 Review the literature

Use the resources available to learn about the symptom and the factors involved. If a similar problem has been handled by someone else before, there is probably a solution documented somewhere. Look it up.

3 Make Observations and Form a Generalization

The more information you can gather about the problem, the better your chances of finding the solution quickly. Find out what has been done to the system recently. You should be able to describe the characteristics of the symptom in detail, and understand how the symptom is affecting the user.

4 Formulate a Hypothesis

"An hypothesis is a statement about concepts, which may be judged true or false with respect to observable phenomena,formulated in a manner suitable for empirical testing." Tt is a description of what you believe to be the cause of the symptom and the solution, based on your observations. It must be clear, concise, and detailed. A good hypothesis predicts test results.

5 Design an Experiment and Test the Hypothesis

A good test conforms to the following criteria:

* The test is repeatable.

Even if your test fixes the symptom, you may not have actually found the true cause. If possible, reverse your test to see if the symptom returns, or attempt the same solution on another computer with the same symptom. Just because you make a change to the system and the symptom goes away, does not always mean that you have actually found the cause.

* The test only manipulates one variable at a time.

Change one thing, then test. Then change another thing, and re-test. Use the process of elimination to isolate possible causes, and test for only one thing at a time. If you change several variables at once, you cannot determine which variable affected the results, and your test will be inconclusive. You may fix the problem this way, but you will not know for certain why the problem is fixed. This means you did not learn anything and you will not be able to prevent this problem from happening again.

6 Draw Conclusions

After performing your test, check again for the symptom. If the symptom is gone, you have probably found the cause (Is your test repeatable?). If the symptom is still present, you have learned something about what is not the cause. Since there are a finite number of causes for any particular symptom, you have made progress by eliminating one of them. You will always learn something from a good test, even if the results are negative.

Example 1: Load balancer routing to dead processes due to configuration change. 
We were able to observe only the symptom. We did not know the cause of the problem. The memory grew gradually and the machine had to be rebooted before the server crashed. Someone had changed the configuration file that lead to the inconsistency between the load balancer and the application server processes. 

Why did they change it? We don't know. 
Who changed it? We don't know. 

This is a communication problem. 

Why did we have the communication problem? 
Our team was distributed and we did not track every change made on the server.

Why changes in the server was not tracked? 
We did not use tools like Chef, Puppet etc to manage our infrastructure.

Why did we not manage our infrastructure using tools like Chef? 
This is a training problem.

Why did we have training problem?
  
Example 2: Installing a software on EC2 for a specific environment was throwing an exception.

The set of instructions for installation and setup worked in QA but not in production. Why? What is the difference between these two environments? We were observing the symptom of the problem, a stack trace from a Java program. The stack trace did not provide the actual cause of the problem, it was throwing up saying it had some serialization problem. We assumed that was the issue and looked for any changes in the Java related differences. We checked the Java versions of the working environments vs the non-working environment. They were the same. We also tested the connectivity to the instances. We were able to connect. We read the vendor's documentation many times, checking if each step was done properly. Eventually it was a problem due to the fact that the specific port expected by the software was not exposed. We referred the documentation and exposed the port and the problem was resolved. This also shows that the software should fail with exception message that is relevant and useful for developers and system administrators. It should run a test for any assumptions like the required ports are exposed to public and notify the users if it's not satisfied.

Example 3 : Image resizing was not working on a SUSE Linux machine on production. It worked fine on Mac OS. To test whether the problem is due to the library:

$identify -version

to check the installed version. To verify the ImageMagick install worked properly, type:

$ /usr/local/bin/convert logo: logo.gif

This isolates the problem and tells us whether the problem is due to our application code or installation issues.


Five Why Analysis
=================
Ask why five times and address the problem at several levels to prevent the problem from happening again.


Notes from the presentation by Blithe Rocher.

Set of Techniques for Acquiring Knowledge.
Methodical
Systematic

1. Define the Problem
Expected behavior
Actual behavior
Criteria for success

2. Do Your Research
Know your environment
Read the literature
Discussions
Make it fail

3. Establish a Hypothesis

4. Design an Experiment to test the hypothesis

Divide and conquer
Keep the variables to a minimum so that you can solve the problem easily.
Try something weird
Hierarchy of Blame

4. Gather Data
Current status
Read the error message

5. Analyze Your Results
Problem Solved?
Learn anything?
Understand the Why
Future Experiments
Embrace the Success

6. Keep a Good Lab Notebook
You won't remember
Logs aren't enough
Commit messages
Update the docs
Contribute
Blog it
Share the knowledge

http://www.nasa.gov/mov/253986main_158_Problem_Solving.mov

http://www.sciencebuddies.org/science-fair-projects/project_scientific_method.shtml#overviewofthescientificmethod

Overview of the Scientific Method

The scientific method is a process for experimentation that is used to explore observations and answer questions. Scientists use the scientific method to search for cause and effect relationships in nature. They design an experiment so that changes to one variable cause something else to vary in a predictable way. The scientific method can help you to focus your software development question, construct a hypothesis, design, execute and evaluate your experiment.

Steps of the Scientific Method

Ask a Question

The scientific method starts when you ask a question about something that you observe: How, What, When, Who, Which, Why or Where?

And in order for the scientific method to answer the question it must be about something that you can measure, preferably with a number.

Write down the question that you want to answer. This makes you think and clarify your thoughts.

Can you design a fair test to answer your question? A "fair test" requires that you change only one variable and keep all other conditions the same. If you cannot design a fair test, then you should change your question.

Do Background Research

Rather than starting from scratch in putting together a plan for answering your question, be savvy in using library and Internet research to help you find the best way to do things and insure that you don't repeat mistakes from the past.

Construct a Hypothesis: A hypothesis is an educated guess about how things work:
"If _____[I do this] _____, then _____[this]_____ will happen."

You must state your hypothesis in a way that you can easily measure and your hypothesis should be constructed in a way to help you answer your original question.

Test Your Hypothesis by Doing an Experiment: Your experiment tests whether your hypothesis is supported or not. It is important for your experiment to be a fair test. You conduct a fair test by making sure that you change only one factor at a time while keeping all other conditions the same.

You should also repeat your experiments several times to make sure that the first results weren't just an accident.

Analyze Your Data and Draw a Conclusion: Once your experiment is complete, you collect your measurements and analyze them to see if they support your hypothesis or not.

Scientists often find that their hypothesis was not supported, and in such cases they will construct a new hypothesis based on the information they learned during their experiment. This starts the entire process of the scientific method over again. Even if they find that their hypothesis was supported, they may want to test it again in a new way.

Communicate Your Results: Communicate your results to others in a final report and share it with others.

Even though we show the scientific method as a series of steps, keep in mind that new information or thinking might cause a scientist to back up and repeat steps at any point during the process. A process like the scientific method that involves such backing up and repeating is called an iterative process.

Throughout this process, keep a journal containing all of your important ideas and information. This journal is called a laboratory notebook.


Background Research Plan


Background research is necessary so that you know how to design and understand your experiment. To make a background research plan — a roadmap of the research questions you need to answer — follow these steps:

    Identify the keywords in the question for your project. Brainstorm additional keywords and concepts.
    Use a table with the "question words" (why, how, who, what, when, where) to generate research questions from your keywords. For example:

    What is the difference between a series and parallel circuit?
    When does a plant grow the most, during the day or night?
    Where is the focal point of a lens?
    How does a java applet work?
    Does a truss make a bridge stronger?
    Why are moths attracted to light?
    Which cleaning products kill the most bacteria?
    
    Throw out irrelevant questions.

    Add to your background research plan a list of mathematical formulas or equations (if any) that you will need to describe the results of your experiment.
    You should also plan to do background research on the history of similar experiments or inventions.
    Network with other people with more experience than yourself: your mentors, parents, and teachers. Ask them: "What software concepts should I study to better understand my software project?" and "What area of computer science covers my project?" Better yet, ask even more specific questions.



Scientists use an experiment to search for cause and effect relationships in nature. In other words, they design an experiment so that changes to one item cause something else to vary in a predictable way.

These changing quantities are called variables. A variable is any factor, trait, or condition that can exist in differing amounts or types. An experiment usually has three kinds of variables: independent, dependent, and controlled.

The independent variable is the one that is changed by the scientist. To insure a fair test, a good experiment has only one independent variable. As the scientist changes the independent variable, he observes what happens.

The scientist focuses his observations on the dependent variable to see how it responds to the change made to the independent variable. The new value of the dependent variable is caused by and depends on the value of the independent variable.

For example, if you open a faucet (the independent variable), the quantity of water flowing (dependent variable) changes in response--you observe that the water flow increases. The number of dependent variables in an experiment varies, but there is often more than one.

Experiments also have controlled variables. Controlled variables are quantities that a scientist wants to remain constant, and he must observe them as carefully as the dependent variables. For example, if we want to measure how much water flow increases when we open a faucet, it is important to make sure that the water pressure (the controlled variable) is held constant. That's because both the water pressure and the opening of a faucet have an impact on how much water flows. If we change both of them at the same time, we can't be sure how much of the change in water flow is because of the faucet opening and how much because of the water pressure. In other words, it would not be a fair test. Most experiments have more than one controlled variable. Some people refer to controlled variables as "constant variables."

In a good experiment, the scientist must be able to measure the values for each variable. Weight or mass is an example of a variable that is very easy to measure. However, imagine trying to do an experiment where one of the variables is love. There is no such thing as a "love-meter." You might have a belief that someone is in love, but you cannot really be sure, and you would probably have friends that don't agree with you. So, love is not measurable in a scientific sense; therefore, it would be a poor variable to use in an experiment.

Hypothesis

After having thoroughly researched your question, you should have some educated guess about how things work. This educated guess about the answer to your question is called the hypothesis.

The hypothesis must be worded so that it can be tested in your experiment. Do this by expressing the hypothesis using your independent variable (the variable you change during your experiment) and your dependent variable (the variable you observe-changes in the dependent variable depend on changes in the independent variable). In fact, many hypotheses are stated exactly like this: "If a particular independent variable is changed, then there is also a change in a certain dependent variable."

    A hypothesis is an educated guess about how things work.
    Most of the time a hypothesis is written like this: "If [I do this], then [this] will happen." (Replace the place holder with the appropriate information from your own experiment.)

    Your hypothesis should be something that you can test. This is called a testable hypothesis. It means that you can measure both "what you do" and "what will happen."


Example Hypotheses

    "Raising the temperature of a cup of water [temperature is the independent variable] will increase the amount of sugar that dissolves [the amount of sugar is the dependent variable]."
    "If a plant receives fertilizer [having fertilizer is the independent variable], then it will grow to be bigger than a plant that does not receive fertilizer [plant size is the dependent variable]."

Notice that in each of the examples it will be easy to measure the independent variables. This is another important characteristic of a good hypothesis. If we can readily measure the variables in the hypothesis, then we say that the hypothesis is testable.

Not every question can be answered by the scientific method. The hypothesis is the key. If you can state your question as a testable hypothesis, then you can use the scientific method to obtain an answer.
Advanced Topic -- Cause & Effect or Correlation?

In some experiments it is not possible to demonstrate that a change in the independent variable causes a change in the dependent variable. Instead one may only be able to show that the independent variable is related to the dependent variable. This relationship is called a correlation. One of the most common reasons to see a correlation is that "intervening variables are also involved which may give rise to the appearance of a possibly direct cause-and-effect relationship, but which upon further investigation turn out to be more directly caused by some other factor" (Wikipedia).


    Write the experimental procedure like a step-by-step recipe for your science experiment. A good procedure is so detailed and complete that it lets someone else duplicate your experiment exactly!
    Repeating a science experiment is an important step to verify that your results are consistent and not just an accident.
        For a typical experiment, you should plan to repeat it at least three times. More is better.
        If you are doing something like growing plants, then you should do the experiment on at least three plants in separate pots (that's the same as doing the experiment three times).
        If you are doing an experiment that involves testing or surveying different groups, you won't need to repeat the experiment three times, but you will need to test or survey a sufficient number of participants to insure that your results are reliable. You will almost always need many more than three participants! 

Conducting a Science Experiment

    If you haven't already, obtain a notebook to record all of your observations during your experiment.
    Before starting your experiment, prepare a data table so you can quickly write down your measurements as you observe them.
    Follow your experimental procedure exactly. If you need to make changes in the procedure (which often happens), write down the changes exactly as you made them.
    Be consistent, careful, and accurate when you take your measurements. Numerical measurements are best.
    Take pictures of your experiment for notes.

Data Analysis & Graphs


    Review your data. Try to look at the results of your experiment with a critical eye. Ask yourself these questions:
        Is it complete, or did you forget something?
        Do you need to collect more data?
        Did you make any mistakes?

    Calculate an average for the different trials of your experiment, if appropriate.

    Make sure to clearly label all tables and graphs. And, include the units of measurement (volts, inches, grams, etc.).

    Place your independent variable on the x-axis of your graph and the dependent variable on the y-axis.



http://www.sciencebuddies.org/blog/2010/02/a-strong-hypothesis.php
http://www.sciencebuddies.org/science-fair-projects/project_learn_more_weaver.shtml



How to Debug Anything Presentation by James Golick

A blind debugging session. 

The website using PHP is down.

What we have to work with

The source code. (No)
Knowledge of the system. (No)
Familiarity with the programming language. (No)
SSH Access. (Yes)

Logging in the real world is often useless. 
Find a pid. ps aux | grep apache

sudo strace -ff -s 2048 -p pid

How to read strace output

write(l, "hi\n", 3) = 3

write -> function name
arguments are l, "hi\n" and 3
return value is 3

To learn more about system calls: man 2 write

strace gives lot of output. Work backwards and find the failure. Look for the error message in the strace output. Find the cause by reading the strace output. Find the offender and write down your hypothesis. Prove your hypothesis. Find the offender. Fix the bug.

0. Forget everything you think you know.
1. Get a third party opinion.
2. Refer the 'Linux Performance Tools' diagram for a list of third-party tools.

You can also use strace to start a process.

sudo strace -ff apt-get update

Work backwards, find failure. Find the cause. Confirm your hypothesis. Locate a hook. Stare at the code. Confirm your hypothesis. 

2. Locate the correct source code. 
3. Identify a hard-coded string to grep for.
4. Stare at the code until it makes sense. 
5. Fix whatever is broken.


0. Forget everything you think you know.
1. Get a third party opinion.
2. Locate the correct source code.
3. Identify a hard-coded string to grep for.
4. Stare at the code until it makes sense.
5. Fix whatever is broken.



