
MongoDB Basics Part 2

Insert Document
========
---------

The db.collection.insert() method inserts new documents to a collection.

```sh
> db.inventory.insert(
...    {
...      item: "ABC1",
...      details: {
...         model: "14Q3",
...         manufacturer: "XYZ Company"
...      },
...      stock: [ { size: "S", qty: 25 }, { size: "M", qty: 50 } ],
...      category: "clothing"
...    }
... )
WriteResult({ "nInserted" : 1 })
```

The result is a WriteResult object that shows the number of documents inserted.

Read Document
========
--------

```sh
> db.inventory.find()
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1",
"details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" },
"stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
```

Insert Multiple Documents
===========
-----------

Create an array that holds multiple documents to insert.

```sh
> var mydocuments =
...     [
...       {
...         item: "ABC2",
...         details: { model: "14Q3", manufacturer: "M1 Corporation" },
...         stock: [ { size: "M", qty: 50 } ],
...         category: "clothing"
...       },
...       {
...         item: "MNO2",
...         details: { model: "14Q3", manufacturer: "ABC Company" },
...         stock: [ { size: "S", qty: 5 }, { size: "M", qty: 5 }, { size: "L", qty: 1 } ],
...         category: "clothing"
...       },
...       {
...         item: "IJK2",
...         details: { model: "14Q2", manufacturer: "M5 Corporation" },
...         stock: [ { size: "S", qty: 5 }, { size: "L", qty: 1 } ],
...         category: "houseware"
...       }
...     ];
```

Insert the documents.

```sh
> db.inventory.insert(mydocuments)
BulkWriteResult({
"writeErrors" : [ ],
"writeConcernErrors" : [ ],
"nInserted" : 3,
"nUpserted" : 0,
"nMatched" : 0,
"nModified" : 0,
"nRemoved" : 0,
"upserted" : [ ]
})
```

Query Documents
=========
---------

Select all documents in a collection.

```sh
> db.inventory.find()
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1",
"details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" },
"stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724d"), "item" : "ABC2",
"details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" },
"stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724e"), "item" : "MNO2",
"details" : { "model" : "14Q3", "manufacturer" : "ABC Company" },
"stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2",
"details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" },
"stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

Specify Equality Condition
-----------

To retrieve from the inventory collection all documents where the category field is houseware:

```sh
> db.inventory.find({category: 'houseware'})
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

Specify Conditions Using Query Operators
-----------

To find documents in the inventory collection where the value of category field is either 'houseware' or 'clothing'.

```sh
> db.inventory.find({category: {$in: ['houseware', 'clothing']}})
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724d"), "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724e"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

You can also use $or operator to achieve the same result :

```sh
> db.inventory.find({ $or: [{ category: 'houseware'}, {category: 'clothing'}]})
{ "_id" : ObjectId("5425a7730b73fd80bdd0724c"), "item" : "ABC1", "details" : { "model" : "14Q3", "manufacturer" : "XYZ Company" }, "stock" : [ { "size" : "S", "qty" : 25 }, { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724d"), "item" : "ABC2", "details" : { "model" : "14Q3", "manufacturer" : "M1 Corporation" }, "stock" : [ { "size" : "M", "qty" : 50 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724e"), "item" : "MNO2", "details" : { "model" : "14Q3", "manufacturer" : "ABC Company" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "M", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "clothing" }
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

The $or operator is not preferred when performing equality checks on the same field.

Specify AND Conditions
-----------

```sh
> db.inventory.find({ category: 'houseware', item: 'IJK2'} )
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```

This query selects all documents where category is houseware and the item value is IKJ2.

Specify OR Conditions
-----------

```sh
> db.inventory.find(    {      $or: [ { qty: { $gt: 1 } }, { category: 'houseware' } ]    } )
{ "_id" : ObjectId("5425a9080b73fd80bdd0724f"), "item" : "IJK2", "details" : { "model" : "14Q2", "manufacturer" : "M5 Corporation" }, "stock" : [ { "size" : "S", "qty" : 5 }, { "size" : "L", "qty" : 1 } ], "category" : "houseware" }
```






```sh
$gem install mongo
Fetching: bson-1.11.1.gem (100%)
Successfully installed bson-1.11.1
Fetching: mongo-1.11.1.gem (100%)
Successfully installed mongo-1.11.1
2 gems installed
$irb
2.1.2 :001 > require 'mongo'
      ** Notice: The native BSON extension was not loaded. **

      For optimal performance, use of the BSON extension is recommended.

      To enable the extension make sure ENV['BSON_EXT_DISABLED'] is not set
      and run the following command:

        gem install bson_ext

      If you continue to receive this message after installing, make sure that
      the bson_ext gem is in your load path.
 => true 
```


```sh
$gem install bson_ext
Fetching: bson_ext-1.11.1.gem (100%)
Building native extensions.  This could take a while...
Successfully installed bson_ext-1.11.1
1 gem installed
$irb
> require 'mongo'
 => true 
```


mongo_client = MongoClient.new('localhost', 27017)
Mongo::ConnectionFailure: Failed to connect to a master node at localhost:27017
	from /Users/bparanj/.rvm/gems/ruby-2.1.2@etdd/gems/mongo-1.11.1/lib/mongo/mongo_client.rb:422:in `connect'
	from /Users/bparanj/.rvm/gems/ruby-2.1.2@etdd/gems/mongo-1.11.1/lib/mongo/mongo_client.rb:661:in `setup'
	from /Users/bparanj/.rvm/gems/ruby-2.1.2@etdd/gems/mongo-1.11.1/lib/mongo/mongo_client.rb:177:in `initialize'
	from (irb):3:in `new'
	from (irb):3
	from /Users/bparanj/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `<main>'





 $mongod
mongod --help for help and startup options
Sat Oct 11 15:06:47 MongoDB starting : pid=61878 port=27017 dbpath=/data/db/ 64-bit 
Sat Oct 11 15:06:47 db version v1.6.2, pdfile version 4.5
Sat Oct 11 15:06:47 git version: aef371ecf5d2a824f16ccdc3b745f3702165602f
Sat Oct 11 15:06:47 sys info: Darwin erh2.10gen.cc 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386 BOOST_LIB_VERSION=1_37
Sat Oct 11 15:06:47 exception in initAndListen std::exception: dbpath (/data/db/) does not exist, terminating
Sat Oct 11 15:06:47  dbexit: 

Sat Oct 11 15:06:47 	 shutdown: going to close listening sockets...
Sat Oct 11 15:06:47 	 shutdown: going to flush oplog...
Sat Oct 11 15:06:47 	 shutdown: going to close sockets...
Sat Oct 11 15:06:47 	 shutdown: waiting for fs preallocator...
Sat Oct 11 15:06:47 	 shutdown: closing all files...
Sat Oct 11 15:06:47      closeAllFiles() finished

Sat Oct 11 15:06:47  dbexit: really exiting now



Created /data/db directory manually. Now, mongod brings up the MongoDB server.

~ $mongod
mongod --help for help and startup options
Sat Oct 11 15:09:03 MongoDB starting : pid=62610 port=27017 dbpath=/data/db/ 64-bit 
Sat Oct 11 15:09:03 db version v1.6.2, pdfile version 4.5
Sat Oct 11 15:09:03 git version: aef371ecf5d2a824f16ccdc3b745f3702165602f
Sat Oct 11 15:09:03 sys info: Darwin erh2.10gen.cc 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386 BOOST_LIB_VERSION=1_37
Sat Oct 11 15:09:03 [initandlisten] waiting for connections on port 27017
Sat Oct 11 15:09:03 [websvr] web admin interface listening on port 28017



 > mongo_client = MongoClient.new('localhost', 27017)
 => #<Mongo::MongoClient:0x00000101312318 @host="localhost", @port=27017, 
 => ["admin", "local"] 
2.1.2 :007 > mongo_client.database_info.each {|info| puts info.inspect}
["admin", 1]
["local", 1]
 => {"admin"=>1, "local"=>1} 

Here you see the database sizes in bytes.

Create a new database

 > db = mongo_client.db('mydb')
 
 Using a Collection
 
 > coll = mydb_conn.collection('testCollection')
 
 Insert Document
 
 > doc = {'name' => 'MongoDB', 'type' => 'database', 'count' => 1, 'info' => {'x' => 203, 'y' => '102'}}
 => {"name"=>"MongoDB", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}} 
 > id = coll.insert(doc)
 => BSON::ObjectId('5439ac843a10e7ef65000001') 

Retrieve Collections

2.1.2 :013 > mydb_conn.collection_names
 => ["testCollection", "system.indexes"] 
2.1.2 :014 > 

Insert Multiple Documents

2.1.2 :015 > 100.times {|i| coll.insert('i' => i)}
 => 100 
 
Finding a Document

2.1.2 :016 > coll.find_one
 => {"_id"=>BSON::ObjectId('5439ac843a10e7ef65000001'), "name"=>"MongoDB", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}} 
2.1.2 :017 > 

2.1.2 :017 > coll.find.each {|row| puts row.inspect}
{"_id"=>BSON::ObjectId('5439ac843a10e7ef65000001'), "name"=>"MongoDB", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000002'), "i"=>0}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000003'), "i"=>1}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000004'), "i"=>2}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000005'), "i"=>3}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000006'), "i"=>4}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000007'), "i"=>5}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000008'), "i"=>6}

till i => 100


Specific Query

2.1.2 :019 > id
 => BSON::ObjectId('5439ac843a10e7ef65000001') 


2.1.2 :020 > coll.find('_id' => id).to_a
 => [{"_id"=>BSON::ObjectId('5439ac843a10e7ef65000001'), "name"=>"MongoDB", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}}] 
2.1.2 :021 > 

Sorting Documents

2.1.2 :021 > coll.find.sort(:i)
 => <Mongo::Cursor:0x808a5d9c namespace='mydb.testCollection' @selector={} @cursor_id=> 
2.1.2 :022 > coll.find.sort(:i => :desc)
 => <Mongo::Cursor:0x808948a8 namespace='mydb.testCollection' @selector={} @cursor_id=> 

Counting Documents

2.1.2 :023 > coll.count
 => 101
 
 
Get a Set of Documents

2.1.2 :026 > puts coll.find('i' => {'$gt' => 95}).to_a
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000062'), "i"=>96}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000063'), "i"=>97}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000064'), "i"=>98}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000065'), "i"=>99}
 => nil 

2.1.2 :027 > puts coll.find('i' => {'$gt' => 20, '$lte' => 30}).to_a
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000017'), "i"=>21}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000018'), "i"=>22}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000019'), "i"=>23}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef6500001a'), "i"=>24}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef6500001b'), "i"=>25}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef6500001c'), "i"=>26}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef6500001d'), "i"=>27}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef6500001e'), "i"=>28}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef6500001f'), "i"=>29}
{"_id"=>BSON::ObjectId('5439ae2b3a10e7ef65000020'), "i"=>30}
 => nil 

Select a Subset of Fields

2.1.2 :030 > coll.find({'_id' => id}, :fields => ['name', 'type']).to_a
 => [{"_id"=>BSON::ObjectId('5439ac843a10e7ef65000001'), "name"=>"MongoDB", "type"=>"database"}] 


Query with Regex

2.1.2 :033 > coll.find({'name' => /^M/}).to_a
 => [{"_id"=>BSON::ObjectId('5439ac843a10e7ef65000001'), "name"=>"MongoDB", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}}] 
2.1.2 

Update Document

2.1.2 :034 > doc
 => {"name"=>"MongoDB", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}, :_id=>BSON::ObjectId('5439ac843a10e7ef65000001')} 
2.1.2 :035 >

doc['name']
 => "MongoDB" 
2.1.2 :036 > 

 doc['name'] = 'MongoDB Ruby'
 => "MongoDB Ruby" 
2.1.2 :037 > coll.update({'_id' => id}, doc)
 => {"err"=>nil, "updatedExisting"=>true, "n"=>1, "ok"=>1.0} 
 
Verify update :

2.1.2 :038 > coll.find('_id' => id).to_a
 => [{"_id"=>BSON::ObjectId('5439ac843a10e7ef65000001'), "name"=>"MongoDB Ruby", "type"=>"database", "count"=>1, "info"=>{"x"=>203, "y"=>"102"}}] 
 
2.1.2 :039 > coll.count
 => 101 
2.1.2 :040 > coll.remove('i' => 70)
 => {"err"=>nil, "n"=>1, "ok"=>1.0} 
2.1.2 :041 > coll.count
 => 100 
2.1.2 :042 > coll.find('i' => 70).to_a
 => [] 
 
 
coll.remove will delete everything. This is a badly named method. It should have been named remove_all.


 
 










References
===========
-----------

1. [MongoDB Map Reduce](http://docs.mongodb.org/manual/core/map-reduce/ 'MongoDB Map Reduce')
2. [MongoDB Ruby Driver Tutorial](https://github.com/mongodb/mongo-ruby-driver/wiki/Tutorial 'MongoDB Ruby Driver')