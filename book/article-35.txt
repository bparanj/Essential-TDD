The Sieve of Erastosthenes
===================
-------------------

The most efficient way to find all of the small primes is by using a sieve such as Sieve of Eratosthenes.

1. Make a list of all the integers <= n and > 1
2. Strike out the multiples of all primes <= sqrt(n), then the numbers that are left are the primes.

Example
===================
-------------------

Find all the primes <= 30

1. First list the numbers from 2 to 30

Diagram goes here

2. First number is prime, so keep it

3. Cross out multiples of 2

Diagram goes here

4. The first number left is 3, so it is the first odd prime, keep it.

5. Cross out all multiples of 3

Diagram goes here

6. Now the first number left is 5, the second odd prime, keep it.

7. Cross out all multiples of 5

Diagram goes here

8. The next number 7 is larger than the square root of 30, so there are no multiples of 7 to eliminate. Therefore the sieve is complete.

Diagram

Demo
===================
-------------------

Javascript demo can be found at www.hbmeyer-de/eratclass.htm

Algorithm
===================
-------------------

while square of(current_prime) <= n
  apply the sieve
end

Terminating Condition is 


Discussion
===================
-------------------

Do not write tests that are dependent on data structures. Because, the data structures are implementation details and can change to optimize performance without changing the behavior. If we couple our tests to the implementation details, our tests will be brittle and break even when the behavior remains the same but when the implementation changes.

  
Find all the primes upto a given number n. For 30 the result is 2,3,5,7,11,13,17,19,23,29
  
Steps
=========
---------------------------

Step 1
-------


```ruby
describe Erastostenes do
  it 'makes a list of all integers <= 30 and greater than 1' do
    e = Erastostenes.new(30)
    number_list = e.number_list
    expect(number_list).to eq([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  end
  
  it 'should cross out multiples of 2' do
    e = Erastostenes.new(30)
    cross_out_multiples_of_two = e.cross_out_multiples_of_two
    
    expect(cross_out_multiples_of_two).to eq([2,3,5,7,9,11,13,15,17,19,21,23,25,27,29])
  end
  
  it 'should cross out multiples of 3' do
    e = Erastostenes.new(30)
    cross_out_multiples_of_three = e.cross_out_multiples_of_three
    
    expect(cross_out_multiples_of_three).to eq([2,3,5,7,11,13,17,19,23,25,29])    
  end
  
  it 'should cross out multiples of 5' do
    e = Erastostenes.new(30)
    cross_out_multiples_of_five = e.cross_out_multiples_of_five
    
    expect(cross_out_multiples_of_five).to eq([2,3,5,7,11,13,17,19,23,29])
  end
  
  
end
```

Step 2
----------


```ruby
class Erastostenes 
  def initialize(n)
    @n = n
    @list = (2..@n).to_a  
  end
  
  def number_list
      (2..@n).to_a  
  end
  
  def cross_out_multiples_of_two
    cross_out_multiples_of(2)
  end
  
  def cross_out_multiples_of_three
    @list = cross_out_multiples_of(2)
    cross_out_multiples_of(3)
  end
  
  def cross_out_multiples_of_five
    list = cross_out_multiples_of_three
    list.reject! do |x|
      unless x == 5
       x % 5 == 0 
      end
    end
  end
  
  private
  
  def cross_out_multiples_of(number)
    @list.reject! do |x|
      unless x == number
       x % number == 0 
      end
    end    
  end
  
end
```

Step 3
-----------

```ruby
describe Erastostenes do
  it 'makes a list of all integers <= 30 and greater than 1' do
    e = Erastostenes.new(30)
    number_list = e.number_list
    expect(number_list).to eq([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])
  end
  
  it 'should cross out multiples of 2' do
    e = Erastostenes.new(30)
    cross_out_multiples_of_two = e.cross_out_multiples_of_two
    
    expect(cross_out_multiples_of_two).to eq([2,3,5,7,9,11,13,15,17,19,21,23,25,27,29])
  end
  
  it 'should cross out multiples of 3' do
    e = Erastostenes.new(30)
    cross_out_multiples_of_three = e.cross_out_multiples_of_three
    
    expect(cross_out_multiples_of_three).to eq([2,3,5,7,11,13,17,19,23,25,29])    
  end
  
  it 'should cross out multiples of 5' do
    e = Erastostenes.new(30)
    cross_out_multiples_of_five = e.cross_out_multiples_of_five
    
    expect(cross_out_multiples_of_five).to eq([2,3,5,7,11,13,17,19,23,29])
  end
  
  it 'should calculate the prime numbers for 30' do
        e = Erastostenes.new(30)
        result = e.calculate
        
        expect(result).to eq([2,3,5,7,11,13,17,19,23,29])
  end
end
```

Step 4
-----------

```ruby
class Erastostenes 
  def initialize(n)
    @n = n
    @list = (2..@n).to_a  
  end
  
  def number_list
    (2..@n).to_a  
  end
  
  
  def calculate
    list = number_list
    list.each do |x|
      unless x >= Math.sqrt(@n)
        cross_out_multiples_of(x)
      end
    end
    @list
  end
  
  
  # private
  def cross_out_multiples_of_two
    cross_out_multiples_of(2)
  end
  
  def cross_out_multiples_of_three
    @list = cross_out_multiples_of(2)
    cross_out_multiples_of(3)
  end
  
  def cross_out_multiples_of_five
    @list = cross_out_multiples_of(2)
    cross_out_multiples_of(3)
    cross_out_multiples_of(5)
  end
  
  private
  
  def cross_out_multiples_of(number)
    @list.reject! do |x|
      unless x == number
       x % number == 0 
      end
    end    
  end
  
end
```