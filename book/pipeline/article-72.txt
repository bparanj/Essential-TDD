Thread Analyzer : 
http://docs.oracle.com/cd/E18659_01/html/821-2124/geeho.html#scrolltoc
http://docs.oracle.com/cd/E18659_01/html/821-2124/gepji.html#scrolltoc

What is strace?
What are the different flags?
What kind of problems can you troubleshoot with it?
How to practice strace command?
How to interpret the strace output?


What is strace?

strace is a command line tool which lets you trace the system calls and signals received by a given process and its children. You can either use it to start a program or you can attach to an existing program to trace the calls the program makes to the system.

strace -s 2000 -f program_name

-s flag specifies the maximum string size we want to print.
-f flag tells strace to follow any children of the program we execute.

Use man pages to learn about what each of the system call does.

sudo strace -c -p pid

-c flag tells strace to count the system calls it observes
If you use -c flag, let it run for desired amount of time and then interrupt the process (ctrl C) to see the accumulated data.

strace -T program_name

-T flag tells strace to time the execution of each system call during tracing.


Strace Overview

strace can be seen as a light weight debugger. We can quickly find out how a program is interacting with the OS. It does this by monitoring system calls and signals.

Uses

Good when you don't have source code or don't want to be bothered to really go through it.
Also, useful for your own code if you don't feel like opening up GDB, but are just interested in understanding external interaction.

Strace stands out as a tool for investigating production systems where you can't afford to run these programs under a debugger. In particular, we have used strace in the following two situations:

    Program foo seems to be in deadlock and has become unresponsive. This could be a target for gdb; however, we haven't always had the source code or sometimes were dealing with scripted languages that weren't straight-forward to run under a debugger. In this case, you run strace on an already running program and you will get the list of system calls being made. This is particularly useful if you are investigating a client/server application or an application that interacts with a database

    Investigating why a program is slow. In particular, we had just moved to a new distributed file system and the new throughput of the system was very slow. You can specify strace with the '-T' option which will tell you how much time was spent in each system call. This helped to determine why the file system was causing things to slow down.

Strace can be used as a debugging tool, or as a primitive profiler.

As a debugger, you can see how given system calls were called, executed and what they return. This is very important, as it allows you to see not only that a program failed, but WHY a program failed. Usually it's just a result of lousy coding not catching all the possible outcomes of a program. Other times it's just hardcoded paths to files. Without strace you get to guess what went wrong where and how. With strace you get a breakdown of a syscall, usually just looking at a return value tells you a lot.

Profiling is another use. You can use it to time execution of each syscalls individually, or as an aggregate. While this might not be enough to fix your problems, it will at least greatly narrow down the list of potential suspects. If you see a lot of fopen/close pairs on a single file, you probably unnecessairly open and close files every execution of a loop, instead of opening and closing it outside of a loop.

Ltrace is strace's close cousin, also very useful. You must learn to differenciate where your bottleneck is. If a total execution is 8 seconds, and you spend only 0.05secs on system calls, then stracing the program is not going to do you much good, the problem is in your code, which is usually a logic problem, or the program actually needs to take that long to run.

The biggest problem with strace/ltrace is reading their output. If you don't know how the calls are made, or at least the names of syscalls/functions, it's going to be difficult to decypher the meaning. Knowing what the functions return can also be very beneficial, especially for different error codes. While it's a pain to decypher, they sometimes really return a pearl of knowledge; once I saw a situation where I ran out of inodes, but not out of free space, thus all the usual utilities didn't give me any warning, I just couldn't make a new file. Reading the error code from strace's output pointed me in the right direction.


strace is a great tool on Linux that every developer should be aware of.  It helps trace system APIs – the APIs used, parameters passed and the error value returned.   It does not require root permissions to run.  You can generate a system call trace on a command that is executed or you can trace an already running process.

    strace ./my_crashing_binary

    strace ./my_crashing_binary 2>out.txt

    strace -p 12345 2>out.txt	
    
    
When Is strace Useful?

strace is very useful while debugging crashes.  Some scenarios where strace can be helpful are –

    Debugging why an installation crashes on a machine.
    Detecting file contention issues such as a file name clash while creating temporary files.
    Debugging random crashes that are most probably due to the program running out of memory or due to it requesting an arbitrarily large chunk of memory.
    Finding out how the program interacts with the file system.
    Debugging crashes reproducibly only on one machine.
    Debugging crashes in unfamilar code or in cases when sources are unavailable.


strace is a good tool for learning how your program makes various system calls (requests to the kernel) and also reports the ones that have failed along with the error value associated with that failure. Not all failures are bugs. For example, a code that is trying to search for a file may get a ENOENT (No such file or directory) error but that may be an acceptable scenario in the logic of the code.

One good use case of using strace is to debug race conditions during temporary file creation. For example a program that may be creating files by appending the process ID (PID) to some predecided string may face problems in multi-threaded scenarios. [A PID+TID (process id + thread id) or a better system call such as mkstemp will fix this].


strace is a handy command line tool which allows you to see which system calls a particular user application is hitting, the arguments passed passed in, and the return values. This is particularly useful if you are trying to debug cryptic error messages from poorly documented software or if you are interested in taking a peak under the hood of an application you are tuning, debugging, or optimizing. As a rule of thumb, if some command-line utility is misbehaving before googling or bugging some one, I always run strace and take a look at where it is choking up.

Let’s look at a simple C program and a simple ruby program and compare the strace output to see how both apps interact with kernel.

#!/usr/bin/ruby
puts "hi!"

Both programs look pretty simple, but the strace output is not so simple. I like to use “strace -ttT executable” which gives the time each syscall was made and how long each syscall took. Check the strace man page for more flags – it is very flexible. strace allows you to track the syscall counts, filter for specific syscalls, and more.


When using strace to attach to a process that is running many threads, use the following format:

strace -f -c -p PID  -o /tmp/outfile.strace

This will capture system calls from all threads within the process.

Strace output:
[joe@mawu:/home/joe]% strace -ttT ./hello.rb 

How to Learn strace
Learn Key Syscalls

http://www.hokstad.com/5-simple-ways-to-troubleshoot-using-strace
http://chadfowler.com/blog/2014/01/26/the-magic-of-strace/
http://mohit.io/blog/strace-those-crashes-on-linux/
http://timetobleed.com/hello-world/
http://www.brendangregg.com/blog/2014-05-11/strace-wow-much-syscall.html
http://www.brendangregg.com/perf.html
http://www.thegeekstuff.com/2011/11/strace-examples/
https://blogs.oracle.com/ksplice/entry/strace_the_sysadmin_s_microscope

http://www.unlimitednovelty.com/2011/05/introducing-celluloid-concurrent-object.html
http://www.sitepoint.com/an-introduction-to-celluloid-part-i/
http://blog.softlayer.com/2013/sysadmin-tips-and-tricks-using-strace-to-monitor-system-calls




How to Debug Anything Presentation by James Golick
=========
---------

A blind debugging session. 

The website using PHP is down.

What we have to work with

The source code. (No)
Knowledge of the system. (No)
Familiarity with the programming language. (No)
SSH Access. (Yes)

Logging in the real world is often useless. 
Find a pid. ps aux | grep apache

sudo strace -ff -s 2048 -p pid

How to read strace output

write(l, "hi\n", 3) = 3

write -> function name
arguments are l, "hi\n" and 3
return value is 3

To learn more about system calls: man 2 write

strace gives lot of output. Work backwards and find the failure. Look for the error message in the strace output. Find the cause by reading the strace output. Find the offender and write down your hypothesis. Prove your hypothesis. Find the offender. Fix the bug.

0. Forget everything you think you know.
1. Get a third party opinion.
2. Refer the 'Linux Performance Tools' diagram for a list of third-party tools.

You can also use strace to start a process.

sudo strace -ff apt-get update

Work backwards, find failure. Find the cause. Confirm your hypothesis. Locate a hook. Stare at the code. Confirm your hypothesis. 

2. Locate the correct source code. 
3. Identify a hard-coded string to grep for.
4. Stare at the code until it makes sense. 
5. Fix whatever is broken.


0. Forget everything you think you know.
1. Get a third party opinion.
2. Locate the correct source code.
3. Identify a hard-coded string to grep for.
4. Stare at the code until it makes sense.
5. Fix whatever is broken.



puts Process.ppid

t = Thread.new do
   sleep 10 
end

# Grabbing the pid.
pid = Process.pid

puts pid 

# Get the child pids.
pipe = IO.popen("ps -ef | grep #{pid}")

child_pids = pipe.readlines.map do |line|
  puts line
  parts = line.split(/\s+/)
  # puts parts
  # parts[2] if parts[3] == pid.to_s and parts[2] != pipe.pid.to_s
end.compact

 # Show the child processes.
# puts child_pids
#
#
# q = Queue.new
# # q.pop
#
#
#
t.join



http://blog.newrelic.com/2013/04/29/debugging-stuck-ruby-processes-what-to-do-before-you-kill-9/
http://blog.newrelic.com/2013/04/22/cross-app-tracing-time-to-break-up-that-huge-rails-application/
http://www.youtube.com/watch?v=sOJaGIP03As

