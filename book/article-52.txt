Mailchimp on Rails



Let's use the simple solution that is easy to setup and get it up and running quickly.


1. Signup for API key here : http://kb.mailchimp.com/article/where-can-i-find-my-api-key

2. Add gibbon gem to Gemfile.

```ruby
gem 'gibbon', github: "amro/gibbon"
```

3. Install the gem.

```ruby
bundle install
```

4. In secrets.yml, set the Mailchimp API key. Here is a sample config file: 

```ruby
development:
  mailchimp_api_key: your-secret-api-key-goes-here 

test:
  mailchimp_api_key: your-secret-api-key-goes-here 

production:
  mailchimp_api_key: your-secret-api-key-goes-here 
```

Create gibbon.rb in config/initializers/ directory with the following contents:

```ruby
Gibbon::API.api_key = Rails.application.secrets.mailchimp_api_key
Gibbon::API.timeout = 15
```
 
Rails.application.secrets.mailchimp_api_key reads the mailchimp API Key from secrets.yml file.

5. Make sure secrets.yml is added to your .gitignore file. Here is a sample .gitignore file to use in the rails root directory:

```ruby
# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all config files
config/amazon_s3.yml
config/database.yml
config/secrets.yml

# Ignore all logfiles and tempfiles.
/log/*.log
/tmp
/upload
/coverage
/log/.development.log.swp
/public/uploads/tmp/*
/public/assets/*
```

Now the secrets.yml will not get checked in to your project's git repository. You must either use capistrano or manually scp the secrets.yml to your server to shared/config directory of your Rails application. Another alternative is to use the environment variables to set the values for api credentials. 

4. Your background job can run the following Mailchimp.subscribe method:

```ruby
class Mailchimp

  def self.subscribe(email, mailchimp_list_id)
    begin
      g = Gibbon::API.new
      g.lists.subscribe({ id: mailchimp_list_id, email:  {email: email}})
    rescue Exception => e
      # log error in mailchimp.log with the email and mailchimp_list_id values
      raise e
    end
  end

end
```

5. If you are using Resque, you can run the failed job again as follows:

```ruby
Resque::Failure.count.times do |i|
  Resque::Failure.requeue(i)
end
```

Rails.application.secrets.mailchimp_rubyplus_rails_list_id


References
==========
------------

[Mailchimp API 2.0](docshttp://apidocs.mailchimp.com/api/2.0/vip/add.php "Mailchimp API 2.0")





https://github.com/amro/gibbon
Comment here http://www.bignerdranch.com/blog/email-marketing-for-your-rails-app-made-easy-with-mailchimp/ and provide a link back to rubyplus.com for code samples.


Improve this http://cheshireoctopus.github.io/blog/2014/01/23/mailchimp-plus-gibbon-plus-rails-create-a-basic-sign-up-form/ article. Move the network call to background task. Move the API credentails to secrets.yml.

Improve this http://hankstoever.com/posts/17-Integrating-mailchimp-with-your-Rails-application comment and link to improved solution on rubyplus.com.



