
Use the Calculator add method to implement the sum of given list of integers.


Rails Test Prescriptions
--------------------------
Emphasize what's different in each test.
View testing: Can you drive the design of view?
Easy to test when the view is visible. Test at the semantic level not the structure. Use dom ids for testing.

Testing Done Good Presentation
---------------------------------------

Good test : Independent, Repeatable, Clear, Concise, Reliable

Independent : No dependency on any external tests or data to run.

Antipattern: Global data, Fixtures
Good practice: Factories, teardown / transactions, Paying attention

Repeatable : Challenges - Date, Time, Random Numbers
Solution : Encapsulation with service objects, Mocks (???)
Clear : Challenges - Fixtures, long tests

Incomprehensible naming, magic results, being clever
Solution: Good naming, factories, refactoring test setups, knowing the big picture (How does this test fit into overall scheme of what you are doing)
Don't be clever, keep it simple and clean.
Complicated tests indicate complicated code.

Refactor: Simplify by dealing with dependency.
Concise : Use minimum amount of code and objects to achieve it's goal.

Antipattern: Long setups, creating too many objects. Multiple assertions. Slow tests. Too many tests.

Pick data that is minimal (boundary condition to deal with off by one error)

Best practices: Macros, single assertion, strategic object and test creation.

Reliable : Fail when code is wrong and vice-versa.

Antipattern: Test is too specific.
Mocking: When it knows too much about implementation.
Testing surface issues: String representation
Testing something that mock returns
Best practice: Indirect testing (eg using dom ids)
Defensive mocking : Using null object to ignore unexpected calls.

Interface Sensitivity
Behavior Sensitivity
Data Sensitivity
Context Sensitivity

Executable spefication : Specify behavior
Defect localization
Specificity - Simplicity
Risk Reduction
Verify behavior in the impossible circumstances
Don't mock yourself out
Avoid test-specific hooks in SUT

Simple Tests : Verify one condition per test
Expressive Test : DSL.
Separation of concerns : Test concerns separately
Communicate Intent : Avoid conditional test logic
Isolate the SUT. Replace DoC with test double using dependency injection.

Goals of Test Automation
---------------------------------------

Tests as Specification : Executable Spec --> Specify behavior --> Design
Tests as documentation : Executable Docs --> Communication / Collaboration
Tests as Safety Net    : Catch Bugs      --> Regression
Tests as Change Enabler : Test should require minimum maintenance --> Ease of Maintenance

Maintainable â€“ Tests should be easy to understand and modify and extend.



Production Bugs -- No test, False +, False -, Buggy tests
High test maintenance cost
code duplication
hard-to-test code
Improve quality
East to write / maintain

A little bit of test code duplication is ok if it improves readability
Stub is used to control when and what happens
Focus on one thing at a time. Get it working. Make it clean. Focus on what and then on how.


I use simplicity as the criteria for choosing to use classic or mockist approach.

Simplicity is the Key
Subjective qualities:
T Testable
U Understandable
B Browsable
E Explainable

Testable - Can write tests to automatically check for problems. Impacts design.
Browsable - Able to find what you want when you want it.
Understandable - Someone new may not understand.
Explainable - Easy to show new people how everything works.





Fragile Tests
---------------------------------------
Overspecifying : Specifying purely internal behavior. Using mocks instead of stubs.


Separate tests that measure progress from those that catch regressions.
Start testing with the simplest success case.
Write the test that you would want to read.
Improve diagnostics.
Develop from the inputs to the outputs.
Unit test behavior, not methods.
Listen to the tests.
Tuning the cycle.

Hiding the right info.
Context independent.
Port and adapters


Not listening to tests. Using spork to test instead of addressing the design flaw.









------------------------
Example for overcoding is a good idea.  The minimum possible code to get all tests to pass. If you can remove a line of code and still have all tests pass, **You're Doing it Wrong**.

'The TDD Express : From Fast to Fastest' presentation by Bill DePhillips of Thoughtworks.
------------------------









