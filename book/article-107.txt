Stripe Recurring Billing Part 2

Assumptions
==========
----------

1. The user is already logged in.
2. The user model has email field.
3. You can define : User has_one subscription, Subscription belongs_to user after you integrate with Devise, Authlogic etc.
4. Move access over the network to a background job in a later version. 
5. To make the demo simple, the stripe related code is in the application wide layout. This can be moved to a separate app/views/layouts/payment.html.erb layout file. Use this layout in subscriptions controller by using the layout Rails method.

Steps
==========
----------

Step 1
----------

Create a Rails 4.1.6 project.

Step 2
----------

Turn off Coffeescript, in application.rb:

```ruby
config.generators.javascripts = false
```

Step 3
----------

Add : 

```ruby
gem 'stripe' 
```

to Gemfile. Run bundle.

Step 4
----------

Setup Stripe keys. In config/initializers/stripe.rb:

```ruby
Rails.configuration.stripe = {
  publishable_key: ENV['STRIPE_PUBLISHABLE_KEY'],
  secret_key:      ENV['STRIPE_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]
```

Step 5
----------

Login to your stripe account. Copy the API Keys and set Stripe environment variables on your development machine.

```sh
export STRIPE_PUBLISHABLE_KEY='pk_test_wyourpublishable key' 
export STRIPE_SECRET_KEY='sk_test_yoursecretkey' 
```

You can add it to your ~/.bash_profile file.

Step 6 
----------

Go to Rails console and type:

```ruby
Stripe.api_key = Rails.configuration.stripe[:secret_key] 
```

Verify the value of secret_key for the Stripe.api_key variable is initialized correctly.

Step 7
----------

In the application.html.erb file, within the head tag add:

```ruby
<%= javascript_include_tag 'https://js.stripe.com/v2/' %>
```

Refer [Building a Custom Payment Form] (https://stripe.com/docs/tutorials/forms 'Building a Custome Payment Form') for more details. The final layout file looks like this:

```ruby
<!DOCTYPE html>
<html>
<head>
  <title>Striped</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  
  <%= javascript_include_tag 'https://js.stripe.com/v2/' %>
  


  <script type="text/javascript">
    // This identifies your website in the createToken call below
    Stripe.setPublishableKey('pk_test_wE4Io131CZgI5yWcRN8OyFkr');
  
    var stripeResponseHandler = function(status, response) {
      var $form = $('#payment-form');

      if (response.error) {
        // Show the errors on the form
        $form.find('.payment-errors').text(response.error.message);
        $form.find('button').prop('disabled', false);
      } else {
        // token contains id, last4, and card type
        var token = response.id;
        // Insert the token into the form so it gets submitted to the server
        $form.append($('<input type="hidden" name="stripeToken" />').val(token));
        // and re-submit
        $form.get(0).submit();
      }
    };
    
    jQuery(function($) {
      $('#payment-form').submit(function(event) {
        var $form = $(this);

        // Disable the submit button to prevent repeated clicks
        $form.find('button').prop('disabled', true);

        Stripe.card.createToken($form, stripeResponseHandler);

        // Prevent the form from submitting with the default action
        return false;
      });
    });
      
  </script>

  
  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

</body>
</html>
```

Step 8
-------

Run the server and go to localhost:3000/subscriptions/new. Enter 4242424242424242 for the credit card. Click on the Submit Payment button. You will get the error: No route matches [POST] "/subscriptions/new" in the browser. Login to your Stripe account, in the test mode, click on the Logs under the REQUESTS tab. You should see your request has reached Stripe servers.


Step 9
-------

Change routes.rb:

  post 'subscriptions/create' => 'subscriptions#create'

Change create in subscriptions controller:

  def create
    logger.info "*" * 80
    logger.info params
    logger.info "*" * 80
  end

In the log file we see:

 Parameters: {"stripeToken"=>"tok_4xfQ0TwMvzJIh9"}
Can't verify CSRF token authenticity
Completed 422 Unprocessable Entity in 1m

You see : ActionController::InvalidAuthenticityToken error in the browser.

Step 10
-------

<%= hidden_field_tag :authenticity_token, form_authenticity_token -%> to new.html.erb

You can now see the stripe token in the log file:

********************************************************************************
{"authenticity_token"=>"9v7mQSZPHGn2CMn3TBBbIfCa8I5SzbPHQm+LMOh2kMw=", "stripeToken"=>"tok_4xfbyn7meV5eUH", "controller"=>"subscriptions", "action"=>"create"}
********************************************************************************

Step 11
-------

You could put the current_user.id and stripeToken in a background job and process it later. For simplicity, let's create a Stripe::Customer object with current_user.email, plan_id and the stripeToken that we get from Stripe response. 

Instead of creating a Stripe::Customer, retrieving it and then creating a subscription (two network calls), we can create the customer and subscription object at once by using the optional plan attribute in the Stripe::Customer class.

customer = Stripe::Customer.create(description: "This must be current_user.email", card:  params[:stripToken], plan: 2)

The plan should be based on the plan selected by the current_user. For now, it is hard-coded to the plan that is already created in the test account.

Step 12
-------

There is no need to validate email because the current_user.email will have value.

customer = Stripe::Customer.create(description: "This must be current_user.email", card:  params[:stripToken], plan: 2)
puts "Save #{customer.id} as the stripe_customer_token in Subscription model"
    
Make code robust, for example, if the plan does not exist you will get: Stripe::InvalidRequestError : "No such plan: gold" error.

Step 13
-------

Move the subscripton creation to app/gateways/stripe_gateway.rb. Add the gateways folder to the Rails autoload_paths.

config.autoload_paths << Rails.root.join('app/gateways')

Step 14
-------

$rails g model subscription plan_name:string stripe_customer_token:string

$rake db:migrate


Step 15
-------

  def create
    stripe = StripeGateway.new(Rails.logger)
    @subscription = strip.create_subscription(email, stripe_token, plan_id)
  end


Step 16
-------

Display the feedback message in subscriptions/create.html.erb.

<% if @subscription.complete? %>
You have been subscribed to <%= @subscription.plan_display_name %>.
<% end %>

You can view the details of the newly created customer in Stripe account by clicking the Customers tab.

Note : If you have problem with disabled 'Submit Payment' button, in FireFox press the shift and refresh button to reload the page.


Complete Source Code 
=============
-------------

Here is the complete source code:

subscriptions_controller.rb

class SubscriptionsController < ApplicationController
  def new
  end
  
  def create
    stripe = StripeGateway.new(Rails.logger)
    @subscription = stripe.create_subscription('current_user.email', params[:stripeToken], 2)
  end
  
end


routes.rb

Rails.application.routes.draw do
  get 'subscriptions/new'
  post 'subscriptions/create' => 'subscriptions#create'
end

application.html.erb

<!DOCTYPE html>
<html>
<head>
  <title>Striped</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  
  <%= javascript_include_tag 'https://js.stripe.com/v2/' %>
  


  <script type="text/javascript">
    // This identifies your website in the createToken call below
    Stripe.setPublishableKey('pk_test_wE4Io131CZgI5yWcRN8OyFkr');
  
    var stripeResponseHandler = function(status, response) {
      var $form = $('#payment-form');

      if (response.error) {
        // Show the errors on the form
        $form.find('.payment-errors').text(response.error.message);
        $form.find('button').prop('disabled', false);
      } else {
        // token contains id, last4, and card type
        var token = response.id;
        // Insert the token into the form so it gets submitted to the server
        $form.append($('<input type="hidden" name="stripeToken" />').val(token));
        // and re-submit
        $form.get(0).submit();
      }
    };
    
    jQuery(function($) {
      $('#payment-form').submit(function(event) {
        var $form = $(this);

        // Disable the submit button to prevent repeated clicks
        $form.find('button').prop('disabled', true);

        Stripe.card.createToken($form, stripeResponseHandler);

        // Prevent the form from submitting with the default action
        return false;
      });
    });
      
  </script>

  
  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

</body>
</html>

config/initializers/stripe.rb

Rails.configuration.stripe = {
  publishable_key: ENV['STRIPE_PUBLISHABLE_KEY'],
  secret_key:      ENV['STRIPE_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]

app/gateways/stripe_gateway.rb

class StripeGateway
  def initialize(logger)
    @logger = logger
  end
  
  def create_subscription(email, stripe_token, plan_id)
    begin
      customer = Stripe::Customer.create(description: email, card: stripe_token, plan: plan_id)
      subscription = Subscription.new
      subscription.stripe_customer_token = customer.id
      subscription.plan_name = plan_id
      subscription.save!
      subscription
    rescue Stripe::InvalidRequestError => e
      @logger.error "Create subscription failed due to : #{e.message}"
    rescue Exception => ex
      @logger.error "Create subscription failed due to : #{ex.message}"  
    end
  end
  
end

application.rb

require File.expand_path('../boot', __FILE__)

require 'rails/all'

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Striped
  class Application < Rails::Application
    # Settings in config/environments/* take precedence over those specified here.
    # Application configuration should go into files in config/initializers
    # -- all .rb files in that directory are automatically loaded.

    # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
    # Run "rake -D time" for a list of tasks for finding time zone names. Default is UTC.
    # config.time_zone = 'Central Time (US & Canada)'

    # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
    # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
    # config.i18n.default_locale = :de
    
    # Turn off Coffeescript
    config.generators.javascripts = false
    
    config.autoload_paths << Rails.root.join('app/gateways')
  end
end


app/models/subscription.rb

class Subscription < ActiveRecord::Base
  
  def plan_display_name
    case self.plan_name
    when 1
      'Silver'
    when 2
      'Gold'
    when 3
      'Platinum'
    else
      'Unknown'
    end
  end
  
  def complete?
    self.stripe_customer_token.present?
  end
end


migration file:

class CreateSubscriptions < ActiveRecord::Migration
  def change
    create_table :subscriptions do |t|
      t.string :plan_name
      t.string :stripe_customer_token

      t.timestamps
    end
  end
end

Download the entire project from Bitbucket: git@bitbucket.org:bparanj/striped.git

-------
https://stripe.com/docs/tutorials/forms


Building Links
---------------

1. Reply to comment on Railscasts on how to test Stripe integration:http://railscasts.com/episodes/288-billing-with-stripe?view=commentshttps://gist.github.com/justinthiele/1307748

Notes
-------

1. https://gist.github.com/justinthiele/1307748

2. Create Test Cases Using https://stripe.com/docs/testing





[Creating a Form for Handling Payments with Stripe] (http://www.larryullman.com/2012/11/28/creating-a-form-for-handling-payments-with-stripe/ 'Stripe')

Include the Stripe.js only on payment page.

<script type="text/javascript" src="https://js.stripe.com/v2/"></script>

<script type="text/javascript">// <![CDATA[
Stripe.setPublishableKey('your-stripe-key-here');
// ]]></script>
<script type="text/javascript" src="js/buy.js"></script>

This payment page must be loaded using https.

<label>Card Number</label>
<input type="text" size="20" autocomplete="off">
<span>Enter the number without spaces or hyphens.</span>
<label>Expiration (MM/YYYY)</label>
<input type="text" size="2">
<span> / </span>
<input type="text" size="4">

<form id="payment-form" action="buy.php" method="POST">
<div id="payment-errors"></div>
</form>

buy.js

$(document).ready(function() {
    // Watch for a form submission:
    $("#payment-form").submit(function(event) {
        $('#submitBtn').attr('disabled', 'disabled');
        return false;
    }); // form submission
}); // document ready.

var error = false;
 
// Get the values:
var ccNum = $('.card-number').val(),
    expMonth = $('.card-expiry-month').val(),
    expYear = $('.card-expiry-year').val();
 
// Validate the number:
if (!Stripe.validateCardNumber(ccNum)) {
    error = true;
    reportError('The credit card number appears to be invalid.');
}
  
// Validate the expiration:
if (!Stripe.validateExpiry(expMonth, expYear)) {
    error = true;
    reportError('The expiration date appears to be invalid.');
}

if (!error) {
    // Get the Stripe token:
    Stripe.createToken({
        number: ccNum,
        cvc: cvcNum,
        exp_month: expMonth,
        exp_year: expYear
    }, stripeResponseHandler);
}

function stripeResponseHandler(status, response) {
  if (response.error) {
      reportError(response.error.message);
  } else { // No errors, submit the form.
    // Get a reference to the form:
    var f = $("#payment-form");
 
    // Get the token from the response:
    var token = response.id;
 
    // Add the token to the form:
    f.append('<input type="hidden" name="stripeToken" value="' + token + '" />');
 
    // Submit the form:
    f.get(0).submit();
  }
} 


function reportError(msg) {
 
    // Show the error in the form:
    $('#payment-errors').text(msg).addClass('error');
 
    // Re-enable the submit button:
    $('#submitBtn').prop('disabled', false);
 
    return false;
 
}