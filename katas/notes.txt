Step 1

require 'minitest/autorun'

class ReverseDigit
  def initialize(n)
    @n = n
  end

  def reverse
    @n
  end
end

describe ReverseDigit do
  it 'should return the same number for single digit number' do
    rd = ReverseDigit.new(1)
    result = rd.reverse
    assert_equal 1, result
  end  
end

Step 2

  it 'should return the reversed number for a two digit number' do
     rd = ReverseDigit.new(15)
     result = rd.reverse
     assert_equal 51, result
   end  

This test fails.

irb session:

Step 3

def reverse
  if @n % 10 == @n
    @n
  else
    d = @n % 10
    result = 5
    while (@n / 10) > 0
      result = (result * 10) + (@n / 10)
      @n = @n / 10
    end
  end
  result
end

Step 4

def reverse
  result = @n % 10
  while (@n / 10) > 0
    result = (result * 10) + (@n / 10)
    @n = @n / 10
  end
  result
end

Step 5

it 'shourd return 51897 for 79815' do
  rd = ReverseDigit.new(79815)
  result = rd.reverse
  assert_equal 51897, result
end  


Expected: 51897
  Actual: 8111597

Step 6

require 'minitest/autorun'

class ReverseDigit
  def initialize(n)
    @n = n
  end

  def reverse
    return @n if @n < 10
  end

  def extract_rightmost_digit
    @n % 10
  end
end

describe ReverseDigit do
  it 'should return the same number for single digit number' do
    rd = ReverseDigit.new(1)
    result = rd.reverse
    assert_equal 1, result
  end  
  
  it 'should extract rightmost digit' do
    rd = ReverseDigit.new(1)  
    result = rd.extract_rightmost_digit
    assert_equal 1, result
  end

  it 'should extract rightmost digit for two digit numbers' do
    rd = ReverseDigit.new(15)  
    result = rd.extract_rightmost_digit
    assert_equal 5, result
  end

  it 'should extract rightmost digit for three digit numbers' do
    rd = ReverseDigit.new(158)  
    result = rd.extract_rightmost_digit
    assert_equal 8, result
  end
end

Step 7

it 'should return the reversed number for a two digit number' do
  rd = ReverseDigit.new(15)
  result = rd.reverse
  assert_equal 51, result
end  

def reverse
  return @n if @n < 10
  while (@n / 10) > 0
    extracted_digit = extract_rightmost_digit
    @n = @n / 10
    reversed_digit = extracted_digit * 10 + extract_rightmost_digit
  end
  reversed_digit
end

Step 8

def reverse
  reversed_digit = @n
  while (@n / 10) > 0
    extracted_digit = extract_rightmost_digit
    @n = @n / 10
    reversed_digit = extracted_digit * 10 + extract_rightmost_digit
  end
  reversed_digit
end

Refactor to replace the conditional that handles the boundary case.

Step 9

Handle three digit case:

it 'should return 897 for 798' do
  rd = ReverseDigit.new(798)
  result = rd.reverse
  assert_equal 897, result
end

def reverse
  reversed_digit = extract_rightmost_digit * 1

  while (@n / 10) > 0
    extracted_digit = extract_rightmost_digit
    @n = @n / 10
    reversed_digit = reversed_digit * 10 + extract_rightmost_digit
  end
  reversed_digit
end

Step 10

it 'should return 51897 for 79815' do
  rd = ReverseDigit.new(79815)
  result = rd.reverse
  assert_equal 51897, result
end

Story test passes. 

Refactored solution and deleted tests that tested extracting rightmost digit.

require 'minitest/autorun'

class ReverseDigit
  def initialize(n)
    @n = n
  end

  def reverse
    reversed_digit = extract_rightmost_digit

    while digits_remain_to_be_reversed?
      remove_rightmost_digit
      reversed_digit = reversed_digit * 10 + extract_rightmost_digit
    end
    reversed_digit
  end

  private

  def extract_rightmost_digit
    @n % 10
  end

  def remove_rightmost_digit
    @n = @n / 10
  end

  def digits_remain_to_be_reversed?
    (@n / 10) > 0
  end
end

describe ReverseDigit do
  it 'should return the same number for single digit number' do
    rd = ReverseDigit.new(1)
    result = rd.reverse
    assert_equal 1, result
  end  
    
  it 'should return the reversed number for a two digit number' do
    rd = ReverseDigit.new(15)
    result = rd.reverse
    assert_equal 51, result
  end  
  
  it 'should return 897 for 798' do
    rd = ReverseDigit.new(798)
    result = rd.reverse
    assert_equal 897, result
  end
  
  it 'should return 51897 for 79815' do
    rd = ReverseDigit.new(79815)
    result = rd.reverse
    assert_equal 51897, result
  end
end

Step 11

Refactor to Ruby idiomatic loop.

class ReverseDigit
  def initialize(n)
    @n = n
  end

  def reverse
    reversed_digit = extract_rightmost_digit

    until all_digits_reversed?
      remove_rightmost_digit
      reversed_digit = reversed_digit * 10 + extract_rightmost_digit
    end
    reversed_digit
  end

  private

  def extract_rightmost_digit
    @n % 10
  end

  def remove_rightmost_digit
    @n = @n / 10
  end

  def all_digits_reversed?
    (@n / 10) == 0
  end
end

