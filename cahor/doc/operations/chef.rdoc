** Chef Development Workflow **
		Gather Requirements
		Write Recipes
		Commit to Repository
		Run Chef in Testing
		Run Chef in Production

Start with Chef-Solo
Run on local machine
Use Vagrant

** Pre Requisite **

 - Ruby 1.9.3
 - Rubygems
 - Chef Ruby Gem

spatula prepare clickplan.net
Read the source code for spatula gem to learn about the prepare command. Extract the code for prepare and update it to use latest rubygems and ruby 1.9.3. Copy upload_ssh_key.

spatula automates the chef_solo_bootstrap.sh script:
https://gist.github.com/2307959 (install ruby, install chef)

Make knife-solo lean, support one flavor of Linux with customizable rubygems and ruby version. Test on Vagrant.
https://github.com/matschaffer/knife-solo

This allows you to remotely install chef on a blank machine using knife prepare and also allows you to push your recipes to your remote server using knife cook.

Librarian - This works like bundler for chef recipes. You define a Cheffile and list out what cookbooks you need, and it will download them and their dependencies into your cookbooks directory. If you have custom recipes, it is good to move them into a site-cookbooks folder so they don't get overwritten by librarian when you import your cookbooks. When you're ready, you can go back to knife-solo to push them out to your server. https://github.com/applicationsonline/librarian

You can use Chef to install Ruby on the server instead of having to log in and set it up yourself.

You can use knife bootstrap host instead of logging in and installing everything chef needs manually. Chef even allows you to build your own custom bootstrap script based on what type of Linux machine your using.

Check out knife help bootstrap http://docs.opscode.com/knife_bootstrap.html

** Cookbooks **

 - apache2
 - phusion passenger
 - mysql
 - git
 - rails
 - create deployer user
 - setup ssh keys for quick logins
 - CRON Resource

cron 'confirmation' do
  hour '12'
  minute '0'
  command '/run/rake/task/rake zepho:confirmation'
end

package 'git-core'
