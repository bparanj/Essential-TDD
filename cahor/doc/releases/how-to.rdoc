Amazon S3

http://github.com/rightscale/right_aws
http://www.codeulatescreencasts.com/products/build-an-app-with-rails-and-s3
http://github.com/contrast/rails-uploadify-s3
http://github.com/contrast/uploadify-s3 


1. sudo gem install aws-s3
2. export AMAZON_ACCESS_KEY_ID='abcdefghijklmnop'
   export AMAZON_SECRET_ACCESS_KEY='12367891012345'

---------------------------------------------------------------------------------------

Using Amazon S3

1. Signup for Amazon S3 account at http://aws.amazon.com 																	_/
2. Get Access key and secret access key (Web services account -> AWS access identifiers)  _/
		https://portal.aws.amazon.com/gp/aws/securityCredentials
3. Copy the secret access key and access key id. 																					_/
4. Add to Gemfile:
	gem "fog"
5. Create a bucket in Amazon S3 called clickplan.net																			_/
6. In the config/initializers :

CarrierWave.configure do |config|
  config.fog_credentials = {
    :provider               => 'AWS',          								  # required
    :aws_access_key_id      => '1GMHRBTC2650KV22TK02',                        # required
    :aws_secret_access_key  => 'RrTVuJoKsTSx291e9Z5/tqhC4XvQrzVoRt93ajvA',    # required
    :region                 => 'eu-west-1'                   # optional, defaults to 'us-east-1'
    :hosts                  => 's3.example.com'              # optional, defaults to nil
    :endpoint               => 'https://s3.example.com:8080' # optional, defaults to nil
  }
  config.fog_directory  = 'name_of_directory'                     # required
  config.fog_public     = false                                   # optional, defaults to true
  config.fog_attributes = {'Cache-Control'=>'max-age=315576000'}  # optional, defaults to {}
end

7. In the FileUploader class, set the storage to :fog
	storage :fog
8. Use the CarrierWave::Uploader#url method to return the url to the file on Amazon S3.

---------------------------------------------------------------------------------------

How to hookup file stamping with Amazon S3 ?

0. Research
1. Download File
2. Stamp it
3. Provide a link to it (hosted on our servers)
4. Delete after a certain period of time.

---------------------------------------------------------------------------------------
How to use CDN to speed up the site?

1. Add gem "fog" to Gemfile.
2. Signup for Amazon Cloud Front account.
3. Copy the credentials to initialize a connection to the service.

require 'fog'

# create a connection to the service
cdn = Fog::CDN.new({
  :provider               => 'AWS',
  :aws_access_key_id      => AWS_ACCESS_KEY_ID,
  :aws_secret_access_key  => AWS_SECRET_ACCESS_KEY
}

4. Setting up your CDN

data = cdn.post_distribution({
  'CustomOrigin' => {
    'DNSName'               => 'www.clickplan.net',
    'OriginProtocolPolicy'  => 'match-viewer'
  }
})

# parse the response for stuff you'll need later
distribution_id   = data.body['Id']
caller_reference  = data.body['CallerReference']
etag              = data.headers['ETag']
cdn_domain_name   = data.body['DomainName']

# wait for the updates to propogate
Fog.wait_for {
  cdn.get_distribution(distribution_id).body['Status'] ## 'Deployed'
}

5. Serving : Replace urls like : http://www.example.com/stylesheets/foo.css with #{cdn_domain_name}/stylesheets/foo.css
   Replace urls that serve images, javascripts and stylesheets.
6. By default the urls arenâ€™t very pretty, something like http://d1xdx2sah5udd0.cloudfront.net/stylesheets/foo.css. You can use CNAME config options to utilize something like http://assets.clickplan.net/stylesheets/foo.css.

---------------------------------------------------------------------------------------

How to create api.clickplan.net, assets.clickplan.net (to be used with CloudFront) ?

---------------------------------------------------------------------------------------

How to create Heroku add-on for Click Plan


---------------------------------------------------------------------------------------

Serving Rails Assets over S3

1. Add gem 'asset_sync' to Gemfile.
2. bundle
3. Create a bucket to synchronize the compiled assets. assets.clickplan.net
4. Enable the asset pipeline in config/application.rb :
    # Enable the asset pipeline
	config.assets.enabled = true
	config.assets.digest = true
5. Also, if you have more than one top-level manifest file under your stylesheets, make sure you also add them in config/application.rb or they will not be compiled and synchronized to S3 and they will break your app.
   config.assets.precompile += %w( blogs.css firmhouse.css inbound_marketing.css )

6. Test:
	export AWS_ACCESS_KEY_ID=xxx
	export AWS_SECRET_ACCESS_KEY=yyy
	export FOG_DIRECTORY=beeblebroxblog
	export FOG_PROVIDER=AWS
	
	bundle exec rake assets:precompile
	
7. Modify config/environments/production.rb :
	  config.action_controller.asset_host = "http://assets.clickplan.net.s3.amazonaws.com"
8. Refer http://blog.firmhouse.com/complete-guide-to-serving-your-rails-assets-over-s3-with-asset_sync
	(Covers S3 and CDN)

---------------------------------------------------------------------------------------

How to display html in rails views

http://www.w3schools.com/html/

 You could just use a standard rhtml template and render it to a string, then pop it into a 
pre tag to display it. If you need a more programmatic approach,  Builder works well.

Or, for something small, I'd just use a helper with content_tag.
Having it all as a seperate template/partial is quite nice though.

<table class="example" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<h2 class="example">Example</h2>

<table class="example_code" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
&lt;html&gt;<br />

&lt;body&gt;<br /><br />

&lt;h1&gt;My First Heading&lt;/h1&gt;<br />

<br />
&lt;p&gt;My first paragraph.&lt;/p&gt;<br />

<br />
&lt;/body&gt;<br />

&lt;/html&gt; 
</td></tr></table>

http://guides.rubyonrails.org/contributing_to_rails.html
	
---------------------------------------------------------------------------------------	

Sending Emails using SendGrid 

1.
First, install Devise and SendGrid.

Then, for production, add this to your files:

config/initializers/devise.rb :

config.mailer_sender = "mail-to-send@from.com"

2.

config/environments/production.rb :

config.action_mailer.default_url_options = { :host => 'your.websitedomain.com' }
ActionMailer::Base.smtp_settings = {
  :address        => "smtp.sendgrid.net",
  :port           => "25",
  :authentication => :plain,
  :user_name      => ENV['SENDGRID_USERNAME'],
  :password       => ENV['SENDGRID_PASSWORD'],
  :domain         => ENV['SENDGRID_DOMAIN']
}

3. :confirmable method must be enabled

4. Use Postfix on production outgoing emails for faster deliver:

http://docs.sendgrid.com/documentation/get-started/integrate/examples/postfix/

5. Use the sendgrid gem for advanced features : https://github.com/stephenb/sendgrid

http://docs.sendgrid.com/documentation/get-started/integrate/examples/rails-example-using-smtp/
http://docs.sendgrid.com/documentation/get-started/integrate/examples/smtp-vs-rest/

Account must be provisioned to send emails?
	
---------------------------------------------------------------------------------------	


