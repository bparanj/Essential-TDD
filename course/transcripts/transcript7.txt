[Continue video 4 ("TDD bootcamp part 3") at 1:24:26] 

S: This is the post-condition check. You’re creating an object, you’re extending with this age identifiable module, you’re mixing in all the behavior of this age identifiable into this object. And this post-condition check, once you mix in this object, now it can respond to can_vote?. If you can vote-- it should raise error:  must supply a birth date. Now we have like a regular expression like you were saying. Because you have not setup a birth date for this guy yet. So it’s not really valid to vote. It’s going to throw exception. That’s part of the contract. To raise error-- if it throws an exception with this error message in it, that’s fine. We pass the test. The post-condition check is valid and we pass this test. 

Second test, I create an object, and this stub, this particular object, I’m going to stub the birth date on it. It’s going to return-- what is your birth date on the stub? It’s going to say 18 years ago. I’m at least 18 years old. So in that case, if I mix in this age identifiable thing, object can_vote? should be true. Which means, yeah, you’re old enough to vote. It will respond to that message; won’t throw any error messages. 

What I wanted you to see is this is the creating of the actual thing. You’re mixing in the behavior like your question was related to the Rails thing, right? If it’s a Rails-- if instead of a regular object, you can just create your persistent object or whatever user or whatever object you have extending from active record, you  can mix in the other guy or you can just mix in a regular object also. You don’t really need an active record object. That is the point. To make your test run faster, you can run this thing outside of Rails.

A: Instead of object, let’s say any class user, class will be there, and user class is in the Ruby code is extending this-

S: Yeah, you can just say user.new, and then you can do user.extend age identifiable. Mix in the behavior, and then you can check, and then you can stub whatever you want in order to force the positive code path. This is the positive code path. I don’t really care if this guy’s 18 years old or not. I’m just setting this old enough so he can respond to the can vote method should return true. That’s more important for me. If he’s old enough to vote, it should return true. That’s what I’m actually focused here. This entire thing does not require-- it does not require any active record, it does not need to do all the require this, so it won’t slow down your test. It will run faster. 

So create, extend this, exercise. Exercise and verification is combined into one step here if you notice. This thing is exercise. If you exercise this, I expect something to happen, so it’s more like a raising error. Exception is a post-condition check.

A: What’s the mix-in? Is that an object?

S: Mix-in is basically a way for you to share behavior. You can mix in any module into classes so that you can share the-- there is no multiple inheritance in Ruby. The only way you can share code instead of doing a multiple inheritance across all the classes is by doing extend of whatever module you have. If you have a setup method, and you can share across any classes you want. The thing I’ve been talking about-- roles. I’ve been talking about roles. 

If you have this person playing the role of a student, parent, all those things, you have a method. Students study, pay attention. Those methods in your module-- module, student, and you can have all those methods-- you can mix in to a person, you can mix in to a bird object, you can mix in to any object. Now you have more flexibility. And you can compose person object to interact in a certain way. I can also send a bird object as long as it mixes in that behavior. It doesn’t care because of duck typing it will just work. It’s all polymorphic.

A: You said whenever we are expecting something, we should mock it. And then you’re stubbing object, and calling the vote on it.

S: Returns true if birth date is 18 years ago. My only concern is, if the person is old enough to vote, the can vote should return true.  So this happens to be incidental. I am forcing a certain code path. This is the positive. This is the pathological case that he was talking about, whereas this is the happy path. Oh, you’re old enough to vote and now we can vote. The can vote-- SUT is the can vote method in this case. That one thing is what I’m testing. It's small enough. Given that user is old enough to vote, had he implemented the can vote it returns true if they’re old enough to vote. That is the question.

A: I think he’s stubbing birth date, not the object.

S: No-- yes. I’m stubbing the birth date. That’s right. Stubbing the birth date, not the object. This is more like a syntax thing. It throws people off. 

A: In the second test case, there’s only a stub; there’s no mock. First one, there’s a mock but no stub. 

S: Yes. Think of this as an object.stub: birth date symbol and returns. Syntax-- as long as you know what it is, it’s okay. What was your point again?

A: My point is-- so the second test case has a stub but it doesn’t have a mock. We’re not using mock here. But the first one you’re using a mock because to expect, or that’s just-
S: There is no mock here. Where is the mock here?
A: No, I just got thrown away by the keyword expect.
S: Oh, this expect is-
A: It’s an assertion?
S: No, it’s not setting an expectation of a mock. It is actually a post-condition check. 
A: That’s what your test is checking.

S: What it means is, you expect whatever happens within this block to raise error. That’s what you’re saying. You’re not setting expectations. No, it’s not-- yes, it’s confusing.

A: It’s the same word but it’s not a mock.
S: Yes. Expect is a bad, confusing-
A: So it’s like an assertion.
S: Yes. I think of it as a post-condition check. Yes, it’s more like an assertion.

A: In the second test, you’re stubbing birth date and then you’re extending the age identifiable. Shouldn’t the extending of age identifiable come first and then you stub the birth date?

S: No. It doesn’t really matter whether you have this thing before this or after this. You know why? If you’re going to extend this, you’re going to extend the behavior of the object with this guy. You’re going to mix in that. 

A: Because birth date I’m assuming is an attribute of age identifiable, right?
A: It’s not an age identifiable object, so if you stub it before you extend it, it’s-- wouldn’t vote.
A: Age identifiable will have a property birth date.
A: Whereas object doesn’t.
A: But if you extend it first, it’s going to have birth date.
A: No. I think age identifiable has can vote and then object has birth date. 
A: Object has birth date too?
A: Yeah. Object has birth date attribute and age identifiable has can word.
A: Wait. Object-- are we talking about the [inaudible] class object?
A: No, it does any of the user class.
S: Yes, think of it as a user. It’s a lot easier. 
A: You’re not thinking about the core Ruby object?
S: No, no. Here is the thing-
A: [Inaudible] cannot be before age identifiable?

S: That’s a very good question, but in order to prevent the confusion-- what you’re saying is right. Think of it as a user. It’s birth date. Think of it as active record. It will be a lot simpler because the reason he’s using object.new is because you don’t need any special objects in order for you to stub something. 

You can stub a real existing any class. That’s the point. You can even take a string.new and start stubbing on it and extending them and mixing in and doing all that stuff. But here’s the thing. If you’re having active record with certain attributes, when you have your own module, your method is actually going to depend on the attributes that are in your user model, like user name, email, vote, this birth date. So there is interaction between-- there is a certain thing to assume there. So you cannot mix in to any bird object or a user object. It needs to have-- it has to obey certain contract. 

As long as you fulfill your responsibility, I can mix in, and I can offer this behavior so I can share the code with this particular bird object or person object or any of those things.
A: So in this case, if you’re using active record and it doesn’t have this birth date attribute, then you wouldn’t use-

S: Yes, you wouldn’t be able to do it. So there is a coupling there. 
A: Because the can vote method is going to look at the birth date.
S: Yes, internally implementation. Because the implementation deals with if, but there is less than 18 years ago. Yes, he’s older, otherwise I’m going to return true. 
So we saw stubs, now we need to handle the mocks. 
A: How long do we have for the class?

S: Probably we are close, like 15 minutes or so. So mock object-- we’ll go over this thing. Mock object is really important. So setup, you create the mock object. One thing you can see is, it’s very similar to previous slides. In the sense we have the installation of the SUT, and the exercise, and in Java you can do a final verification explicitly. But in RSpec, this is going to be implicit verification. There’s no mock that verifies. You set the expectations here itself when you install. Once you create, you set the expectations on the mock, you install it on SUT, you exercise, this will be missing. This won’t be there because of the implicit checking. 

The same example that we saw before. We have a stub customer, stub the name, return the customer Joe, create stub, we set the program to return a canned response. We have a logger called mock logger. The focus here is logs the message went printed. So logger is a primary collaborator right now, and logger-- we create the SUT, we install the stub and the mock. Now we set the expectations on it. Logger should receive log with Joe customer like you were saying. Now the logger is going to log fail for it; I want to have a partial match for it. Here is the exercise phase. 

So let me break this thing down. I had a lot of questions previously, so I broke this thing down further. Statement.print will exercise, and the log message should receive with that particular string in order to pass. So we have a statement-- customer and logger. Statement is the SUT. Why is it SUT? Because that’s what I have in the doc string. That’s what you’re testing. Statement is the system under test. Primary collaborator is the logger. 

Why is that so? Because that’s what I care about. I only care about this logger receiving the log statement with the string. That’s what I’m testing. Logs a message with printer. Printer is where I’m exercising it. So we have statement is the SUT. We have logger, it’s a primary collaborator. This is a secondary collaborator. This guy is playing a second fiddle. It’s like a vice captain of a team. He’s not really doing any real job. We have a sequence diagram where we have the first one where the statement. I call the print right? Statement.print right? It’s interacting with the customer. Customer is going to give you the Joe Customer. It just happens I need the Joe Customer in order to dump the Joe Customer into the logger. This is the indirect input. Indirect input that is required from the stub. That we’ve been going through in different slides. This is the incidental interaction. This is the essential interaction. 

This is what I care about; that’s why it’s essential. Incidental just happens to be there in order to give me this output that I need for this essential interaction to happen that’s going to go to the logger. That’s why I’m setting the expectation on the logger mock in my code. Logger mock logger, mock logger is installed, I set the expectation on it, and I exercise the SUT. This guy is just playing the second fiddle here. He’s not really doing much. He’s just there to provide the indirect input this guy needs so that Joe Customer goes into the logger. This guy’s just showing-- you can also just use the object instead of using a stub and this kind of a thing-- you can also just create a regular object like this, and you can stub them. And then you can install them. And you can just say log setting a message expectation. 

A: So the mock expectation doesn’t always use the keyword expect? In this case, it used the keyword should receive?

S: Because this is RSpec. The one I showed you was mini tests, like Ruby’s built-in thing. It’s a different-- it’s using mockka, stubba. Different library. That’s why the syntax is different. 

A: But should receive can also be a standard assertion like RSpec assertion?
S: No. Should receive is the way you set expectations on a mock. 
A: What’s going to happen when you call a statement.print? It is like logger would get called and logger would be calling log with it.
S: Yes-
A: That logger class-- the log method from logger class would get called when you call statement.print. So you setup your expectation before the calls.
A: Because this should, the syntax is very similar to the assertion statement. So I get confused which ones to mock-- expectation, which one is assertion.
A: Should receive-
S: Is setting the expectation. 
A: The should be or should will revert back to the assertion.
A: Should receive is the syntax for expect, so it-
S: Expect is not the method name that’s post-condition. I know. It’s not properly named. The RSpec guys-- it creates confusion. They’re not in the clarification business. They want to create confusion so they can go in as a consultant and charge you really high price for it.

A: Mock is sort of like a generic stub, RSpec [inaudible]
S: You’re clear about what is expect and what is setting expectations-- always should receive is how we set expectation. Expect is not actually setting expectations. So these are side effects. Something going into the logger is a side effect, for instance, because we cannot really see with the naked eye. We had to go to the five system and open the logger and look at it. But we are not really using a real file system to do this. We’re mocking the logger. All we care about, as long as somebody behaves like-- fakes as if they’re the logger, this should be sent there. That’s all I care about.  

And caching. One thing is, you have a mock here, and you create the SUT, you install the mock on it, now you’re setting the expectation on it. Should receive valid question mark with this once and return true.  There’s a lot of constraints on the API that we can use. We can have certain arguments, exactly once, twice, exactly three times. You can specify more constraints, but you should not specify more constraints unless it’s really required because over-specifying is one of the reasons why your tests become brittle. Because you’re constraining the system so much, the implementation changes. Even though the behavior remains the same, your test will break. 

In this case, I call the zip code twice. So the first time it will hit the layer, and the second time it’s not going to hit. So the once will pass. If it’s hit again, it will fail. The caching is not working in that case. So in this case, I want to use. I want to constrain and make sure it’s caching properly. Should validate only once. Caching in a one sense.

A: How can you specify that it should receive it once and then receive it again with a different-- I was messing with it to get multiple should receives, but I couldn’t figure out how to specify different arguments. 

S: You want to chain the-- you want to specify the sequence at which messages get-- here is the thing. You brought in a very good point. Whenever you’re constraining a certain thing should go in a certain sequence, it’s more like a procedural thing. You’re actually constraining the system, and you’re going toward where you’re over specifying things actually. What tomorrow you change the sequence. You want to specify as minimum as possible to capture the behavior; at the same time you don’t want to tie to the implementation while you-

A: But I could see a very valid case for wanting to do that when you have a default. If you’re working with some web service or something, I’ll try sending this user. That fails. You try like a default read-only user. So I do have a valid case for wanting to specify as like a backup. I’m not sure how to do that.

S:  I see. I don’t know the syntax, probably that would be a very good question. Maybe ask the mailing list, they may know how to use it. See, there is relishapp.com where actually does a really good job of actually posting very good documentation on the existing RSpec.  I would go through it first, before I even post this on the mailing list. 

Interface discovery. We already saw this thing here. When you’re mocking, you’re basically discovering what you want to actually mock. Thing I’m working on, something I named this, and returned this, something [do something complicated SS], discovering the API. That’s what you did when you were working on Fibonacci. So mock only types that you want. Don’t mock things that you don’t want because you cannot drive the design of something else. 

Mock only immediate neighbors. This is because you don’t want to violate law of Demeter principle like you cannot just keep on going-- a.b.c.d.e.f.-- it just becomes a train wreck. From a design standpoint, you’re trying to stay away from that as much as possible. If it’s a well-designed system, you only mock immediate neighbors. You will not go-- you will not chain calls for too many levels. The active relation is an exception, because it’s a relational thing, so that’s okay to compose that way. But when you have your own object, just make sure you don’t go too many levels.

Mock only roles. I already said-- it’s roles you can actually plug in. You can have the plug-in capability. You have like a student, student is a role. You can have a mock student, a real student, and then so this way it becomes pluggable behavior. In this case you have different roles. These are the things I can mock. Don’t mock a concrete person object. This different roles I can mock. I have returned this code, and I have control over this code, so I can drive the design of this code, so I can mock it. 

A:  If you can stub person-
S: Yes, but don’t mock the person. Don’t mock concrete classes. Mock only roles because it’s also pluggability. 

And also values-- there are two kinds of objects. One is like a value object, one is an identity object which has identity. Value objects are like money, currency. $10 in your pocket is the same value as $10 in my pocket. They don’t have identity, unless it’s a fake $10 that you have. So don’t mock the value object. If it’s a currency or a money object, just use the real object. Don’t mock it. 

So that completes the stubs and mocks and the basics of testing. I’m just quickly going to run through this designing for testability and effective test automation. It’s a very quick thing. 

Layer architecture. If you have well-designed thing, you’ll have a layered architecture. So things you were talking about, you have ports and adapters-- if you read about ports and adapter architecture-- you have some external library. This is technical domain. You have the adapter layer-- that is going to actually translate all the terminology in this technical domain to your application domain. So you keep your application domain purely business. Very pure domain model. You don’t let any of this technical terminology leak into your domain. You keep your domain model pure, and also isolate from any of the changes that happen in the external library. Same thing here in the UI thing, UI, UI related stuff, you have adapter, and you have translating all the events going in and out. You can read more about the ports and adapters later. Alaister Cockburn or somebody came up with it.

And you have this application object. You have a domain layer, and this is the question you had in the morning. You have an adapter-- third-party adapter. Third-party API like some web service, or what the external web service API is. You create a very thin layer, and you define a well-defined interface. These are the things that you own. And your domain model only uses this. 

By doing this, you isolate yourself from the changes that’s happening at the third-party API at their own delivery schedule. It doesn’t impact the release schedule of your domain. And you can have a learning test here. Like I said, this adapter layer will have its own test to make sure it can communicate with the third party and integrate well. So it runs properly in the production system. Since you have control over this, you can mock this particular thing because you own this. You don’t own this; you stub this guy. And you actually have a real object going in your integration test and you run against the sandbox of the API provider. Anything that calls back from that adapter layer back to your application object, you can mock it because you also own this. When you’re testing this setup cluster, for instance. This is a call-back going.

Test double, we already saw. 
So we want to see dependency injection. We already saw in the test code. See how we actually create the real object in the production system, but in the test environment: we create a test double, and we actually install the test double on the SUT. Client uses this test double in the SUT so that this guy is actually using this guy when you do exercise. See this create, and then it’s actually using when you create SUT, you will actually make this guy use a test double. 

We already saw this. One thing I wanted to really mention is seams. If you find a seam, where do you-- you just found dependency injection, you go on using everywhere. No. You just want to find a pluggable points in your system. But how do you find a pluggable point? It’s not-- it’s kind of like something where you can plug in, but the behavior is more like-- if you plug in something, the behavior should change-- something more like this. If you change this, and you plug it in, the behavior changes. Pluggable behavior. 

Basically mock object is misnamed. It’s really a technique for identifying types in a system based on the roles the objects play. If you use the mock objects the right way.

I want to now briefly go over this thing. When you want to stub versus when you want to use mock. Whenever you have a command, there are two types of messages you can send. I can ask, what’s your name? He said, Mike. So this is a query. I sent a person object a query. I got a response back. This I can stub. 

And if I say, okay, Igor you can go and have lunch. He did not say anything to me. He just goes. His behavior changed. That’s change of behavior. And if he really ordered lunch or not, I cannot really see. Ordering of lunch is part of what I really know-- he really had his lunch? Then I need to use a mock in that case. That is a command. I gave him a command-- for you I queried object. For this person, I sent a command. I don’t know if that behavior was there or not. I have to set an expectation on it. 

So query, I showed you what a query is.

Name-- my name is Matz, so I can stub it. You’re basically reading state. Command, behavior is another case of command. I say person, I say, okay, save yourself. You are a user object. I send a save command to you, but you’re extending from persistable from ORM layer, but you don’t really know how to save yourself. You’re just delegating the call to the ORM layer. 

Just use one mock per test. Don’t go crazy with using mocks everywhere. If you get to a point where you’re using too many stubs and mocks in your test, I would actually stop and I would actually see if I can use real objects. Does it simplify your tests? If it does, go and use real objects. Because I don’t care if I’m a classic TDD guy or a BDD guy. My ultimate guideline for choosing one over the other is simplicity. Like I said in the beginning.

You can stub chains. Like I told you, mock only immediate neighbor, but you can violate it by using stubs chains available in RSpec. Be very careful. You can only do it only maybe you’re using some third-party library. You have no other option than to use it. Otherwise, this is a sign of a design smell.

Control points we already saw where we are providing input and output. 
Observation points.

[Stop video 4 ("TDD bootcamp part 3") at 1:54:02] 

[Continue video 4 ("TDD bootcamp part 3") at 1:54:02] 
S: Control points we already saw where we are providing input and output. Observation points. Easy testing of system. If you have followed all these things, it should allow you to easily test the thing. 
Effective test automation. Test automation difficulty and maintainability of automated tests. Easiest to test is domain model, then the stateless service objects, then the statefull service objects, hard-to-test code, like transactions, multi-threading, GUI components, asynchronous messaging, those kinds of things. There are ways to test them, but we won’t be really covering them. It’s like an advanced topic. Legacy software-- like anything that does not have any tests. Could be OO. And Non-OO legacy software is even more difficult and challenging to test.

Roadmap to a highly-maintainable automated test. Exercise the happy path code, then all the alternate scenarios, pathological cases. Verify direct outputs. These are the-- you’re asserting on messages. Asserting on messages is what setting expectations on mocks is about. Verify alternative paths. All the alternative scenarios. Verify indirect output behavior. 

I send a command. I want to verify, okay, you did send a lunch order or something. And then you focus on optimizing the test execution and maintainability. Okay, my rails tests are very slow. I need to make it run faster. What are the techniques for making it faster? People are using where I showed the mix-ins, where I showed where you can mix in to a stub, and you can run it outside of Rails now, and you can test your age identifiable thing as part of the stub. As long as the stub has all the burden and all the relevant fields that actually has some kind of a coupling there. If you want, I can give you the slide. I would rather have you pay attention rather than focusing on writing everything down. You’ll get the slides, don’t worry. 

So that completes the testing. I just want to quickly run through this RSpec quick tour. Matchers. I showed equal equal. That’s what you did. If you want to get going, you can get going. So you have in this case, you have equal equal expected, and then you have this equal. You don’t have question mark. Equal [ends SS] identity. The expecter something. And then you have [comparisons SS]-- should be greater than, less than, should be within a certain given range of things, like Delta, if it’s like a 0.01 or something. And then regular expression like what Mike was saying. You can have regular expression and the string that you should match. Should be an instance of, should be a kind of certain specific type of classes, and it should be true, should be false, should be [null SS]-- those kind of things. And then expect, the confusing expect. This is not really a mock; this is more like a post-condition check. To raise some error-- if you want to specify that specific error, you can specify, and if you’re worried about the actual message, you can specify both classes so that there’s no error. And you can also say, throw a certain symbol and what that symbol is and what that value should be. [Pretty good matches SS] should be happening. Those [exercises SS] will be like question mark that you need to Implement with it returns a true or false. Should have some arguments. And then ranges should cover 3:  1 to 10, yes it does have 3 in it. It covers; it’s only for 1.9. And then you have some collection. Does it include something in the collection if the collection is 1 to 10, does it include 3? Yes. 1 to 3 include 1? Yes. 1 and 2? Yes. This string includes is STR? Yes. This is the hash. Should include this? Yes. Should be empty. So you’ll have an empty question mark. Should not be empty, then again empty question mark fails. And that’s the end of the quick tour. 

So to conclude, have nothing in your houses that you do not know to be useful or believe to be beautiful. Everything that’s not useful or beautiful is clutter. And your software should be the same way. Either it’s useful to the user, or it’s not. If it’s not, delete them, throw it away. 

And if it’s not beautiful, clean it up and make it beautiful. So we live in a real world. If you want to go back and do this thing, of course the real world is messy. So out of clutter, find simplicity. From discord, find harmony. In the middle of difficulty lies opportunity. So it’s not an easy job. Going into the real world trying to find simplicity. 

But I leave you with a message. Simplicity is what we’re aiming for in TDD. The design, the documentation, being able to do this. It’s an elusive thing. We cannot really define what it is, but you can recognize some of the things I have showed you. It’s kind of like a journey. We’re always striving for simplicity in our design, in our tests, in our code. Everything.  

A: Thanks.
[Applause]
S: This is the first time I’ve seen people clapping for this. Because I have refined my stuff so much, I have finally nailed the conclusion.
